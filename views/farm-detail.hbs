<div class="row">
    <div class="col-12">
        <div class="d-flex justify-content-between align-items-center mb-4">
            <div>
                <h1>
                    <i class="fas fa-map-marker-alt me-2"></i>{{farm.name}}
                </h1>
                <p class="text-muted mb-0">IP: <code>{{farm.ip}}</code></p>
            </div>
            <div>
                <a href="/farms/{{farm.id}}/edit" class="btn btn-outline-primary me-2">
                    <i class="fas fa-edit me-1"></i>編輯
                </a>
                <a href="/farms" class="btn btn-secondary">
                    <i class="fas fa-arrow-left me-1"></i>返回列表
                </a>
            </div>
        </div>
    </div>
</div>

<!-- 統計卡片 -->
<div class="row mb-4">
    <div class="col-lg-3 col-md-6 mb-3">
        <div class="card bg-primary text-white">
            <div class="card-body text-center">
                <i class="fas fa-calendar-alt fa-2x mb-2"></i>
                <h4 class="mb-0">{{farm.stats.feeding_days}}</h4>
                <small>飼養天數</small>
            </div>
        </div>
    </div>
    
    <div class="col-lg-3 col-md-6 mb-3">
        <div class="card bg-success text-white">
            <div class="card-body text-center">
                <i class="fas fa-feather-alt fa-2x mb-2"></i>
                <h4 class="mb-0">{{farm.stats.animal_count}}</h4>
                <small>飼養數量 (隻)</small>
            </div>
        </div>
    </div>
    
    <div class="col-lg-3 col-md-6 mb-3">
        <div class="card bg-info text-white">
            <div class="card-body text-center">
                <i class="fas fa-tint fa-2x mb-2"></i>
                <h4 class="mb-0">{{farm.stats.water_consumption}}</h4>
                <small>飲水量 (公升)</small>
            </div>
        </div>
    </div>
    
    <div class="col-lg-3 col-md-6 mb-3">
        <div class="card bg-warning text-white">
            <div class="card-body text-center">
                <i class="fas fa-fan fa-2x mb-2"></i>
                <h4 class="mb-0">{{farm.stats.fan_count}}</h4>
                <small>風扇數量 (台)</small>
            </div>
        </div>
    </div>
</div>

<!-- 場域佈局管理 -->
<div class="row">
    <div class="col-12">
        <div class="card">
            <div class="card-header">
                <h5 class="mb-0">
                    <i class="fas fa-image me-2"></i>場域佈局圖
                </h5>
            </div>
            <div class="card-body p-0">
                {{#if farm.layout_image}}
                <!-- 佈局圖外框 -->
                <div class="layout-wrapper">
                    <div class="layout-container-enhanced">
                        <div class="layout-image-container">
                            <img id="layout-image" src="/uploads/{{farm.layout_image}}" alt="場域佈局圖">
                            
                            <!-- 感測器和設備標記 -->
                            <div id="sensors-container" class="markers-layer">
                                {{#each farm.sensors}}
                                <div class="sensor-marker" style="position: absolute; left: {{this.x}}%; top: {{this.y}}%;" 
                                     data-type="sensor" data-id="{{this.id}}" title="{{this.name}}">
                                    <i class="fas fa-thermometer-half text-primary"></i>
                                </div>
                                {{/each}}
                            </div>
                            
                            <div id="devices-container" class="markers-layer">
                                {{#each farm.devices}}
                                <div class="device-marker" style="position: absolute; left: {{this.x}}%; top: {{this.y}}%;" 
                                     data-type="device" data-id="{{this.id}}" title="{{this.name}}">
                                    <i class="fas fa-fan text-warning"></i>
                                </div>
                                {{/each}}
                            </div>
                            
                            <!-- 格線背景 -->
                            <div class="grid-overlay" id="grid-overlay"></div>
                        </div>
                        

                    </div>
                </div>
                
                <!-- 工具列 -->
                <div class="layout-toolbar">
                    <div class="d-flex justify-content-between align-items-center">
                        <div class="btn-group" role="group">
                            <button type="button" class="btn btn-outline-primary" id="edit-mode-btn">
                                <i class="fas fa-edit me-1"></i>編輯模式
                            </button>
                            <button type="button" class="btn btn-outline-success" id="add-sensor-btn" disabled>
                                <i class="fas fa-plus me-1"></i>新增感測器
                            </button>
                            <button type="button" class="btn btn-outline-warning" id="add-device-btn" disabled>
                                <i class="fas fa-plus me-1"></i>新增設備
                            </button>
                        </div>
                        <div class="d-flex align-items-center">
                            <button type="button" class="btn btn-success me-3" id="save-layout-btn" style="display: none;">
                                <i class="fas fa-save me-1"></i>儲存佈局
                            </button>
                            <span class="text-muted small" id="layout-info">
                                <i class="fas fa-info-circle me-1"></i>點擊編輯模式開始配置設備位置
                            </span>
                        </div>
                    </div>
                </div>
                {{else}}
                <div class="text-center py-5">
                    <i class="fas fa-upload fa-3x text-muted mb-3"></i>
                    <h5 class="text-muted">尚未上傳場域佈局圖</h5>
                    <p class="text-muted">請上傳場域的平面圖以便進行設備和感測器的配置</p>
                </div>
                {{/if}}
                
                <!-- 上傳新圖片 -->
                <form action="/farms/{{farm._id}}/upload-layout" method="post" enctype="multipart/form-data" class="mt-3" id="uploadForm">
                    <div class="input-group">
                        <input type="file" class="form-control" name="layout_image" accept="image/*" required id="layoutImageInput">
                        <button type="button" class="btn btn-primary" id="uploadBtn">
                            <span id="uploadBtnText">
                                <i class="fas fa-upload me-1"></i>{{#if farm.layout_image}}更換圖片{{else}}上傳圖片{{/if}}
                            </span>
                            <span id="uploadingText" class="d-none">
                                <i class="fas fa-spinner fa-spin me-1"></i>上傳中...
                            </span>
                        </button>
                    </div>
                    <div class="form-text">支援格式：JPG, PNG, GIF (最大 5MB)</div>
                </form>
            </div>
        </div>
    </div>
</div>

<!-- 感測器和設備列表 -->
<div class="row mt-4">
    <div class="col-md-6">
        <div class="card">
            <div class="card-header">
                <h6 class="mb-0">
                    <i class="fas fa-thermometer-half me-2"></i>感測器列表
                </h6>
            </div>
            <div class="card-body">
                {{#if farm.sensors}}
                <div class="list-group">
                    {{#each farm.sensors}}
                    <div class="list-group-item d-flex justify-content-between align-items-center">
                        <div>
                            {{#if this.description}}
                            <strong>{{this.description}}</strong>
                            <br>
                            <small class="text-muted">類型名稱: {{this.name}}</small>
                            {{else}}
                            <strong>{{this.name}}</strong>
                            {{/if}}
                            <br>
                            <small class="text-muted">類型: {{this.type}}</small>
                            {{#if this.deviceName}}
                            <br>
                            <small class="text-muted">設備: {{this.deviceName}}</small>
                            {{/if}}
                        </div>
                        <div class="text-end">
                            <span class="badge {{statusBadge this.status}} rounded-pill mb-1">{{this.status}}</span>
                            <br>
                            <small class="text-muted">{{this.x}}, {{this.y}}</small>
                        </div>
                    </div>
                    {{/each}}
                </div>
                {{else}}
                <p class="text-muted text-center py-3">尚無感測器資料</p>
                {{/if}}
            </div>
        </div>
    </div>
    
    <div class="col-md-6">
        <div class="card">
            <div class="card-header">
                <h6 class="mb-0">
                    <i class="fas fa-fan me-2"></i>設備列表
                </h6>
            </div>
            <div class="card-body">
                {{#if farm.devices}}
                <div class="list-group">
                    {{#each farm.devices}}
                    <div class="list-group-item d-flex justify-content-between align-items-center">
                        <div>
                            <strong>{{this.name}}</strong>
                            <br>
                            <small class="text-muted">類型: {{this.type}}</small>
                            {{#if this.deviceName}}
                            <br>
                            <small class="text-muted">設備: {{this.deviceName}}</small>
                            {{/if}}
                        </div>
                        <div class="text-end">
                            <span class="badge {{statusBadge this.status}} rounded-pill mb-1">{{this.status}}</span>
                            <br>
                            <small class="text-muted">{{this.x}}, {{this.y}}</small>
                        </div>
                    </div>
                    {{/each}}
                </div>
                {{else}}
                <p class="text-muted text-center py-3">尚無設備資料</p>
                {{/if}}
            </div>
        </div>
    </div>
</div>

<script>
// 2D 佈局編輯功能
document.addEventListener('DOMContentLoaded', function() {
    const farmId = '{{farm._id}}';
    let editMode = false;
    let sensors = {{{json farm.sensors}}};
    let devices = {{{json farm.devices}}};
    
    const editModeBtn = document.getElementById('edit-mode-btn');
    const addSensorBtn = document.getElementById('add-sensor-btn');
    const addDeviceBtn = document.getElementById('add-device-btn');
    const saveLayoutBtn = document.getElementById('save-layout-btn');
    const layoutImage = document.getElementById('layout-image');

    const style = document.createElement('style');
    style.innerHTML = `
        .dragging {
            cursor: grabbing !important;
            z-index: 1000;
            pointer-events: none;
        }
    `;
    document.head.appendChild(style);
    
    if (editModeBtn) {
        editModeBtn.addEventListener('click', toggleEditMode);
    }
    
    if (addSensorBtn) {
        addSensorBtn.addEventListener('click', () => addItem('sensor'));
    }
    
    if (addDeviceBtn) {
        addDeviceBtn.addEventListener('click', () => addItem('device'));
    }
    
    if (saveLayoutBtn) {
        saveLayoutBtn.addEventListener('click', saveLayout);
    }
    
    function toggleEditMode() {
        editMode = !editMode;
        const gridOverlay = document.getElementById('grid-overlay');
        const layoutInfo = document.getElementById('layout-info');
        
        if (editMode) {
            editModeBtn.innerHTML = '<i class="fas fa-times me-1"></i>退出編輯';
            editModeBtn.className = 'btn btn-danger';
            addSensorBtn.disabled = false;
            addDeviceBtn.disabled = false;
            saveLayoutBtn.style.display = 'inline-block';
            if(layoutImage) layoutImage.style.cursor = 'crosshair';
            if (gridOverlay) gridOverlay.classList.remove('show');
            if (layoutInfo) {
                layoutInfo.innerHTML = '<i class="fas fa-edit me-1"></i>編輯模式：拖動設備調整位置';
                layoutInfo.style.background = 'rgba(40, 167, 69, 0.1)';
                layoutInfo.style.borderColor = 'rgba(40, 167, 69, 0.2)';
            }
            enableDragging();
        } else {
            editModeBtn.innerHTML = '<i class="fas fa-edit me-1"></i>編輯模式';
            editModeBtn.className = 'btn btn-outline-primary';
            addSensorBtn.disabled = true;
            addDeviceBtn.disabled = true;
            saveLayoutBtn.style.display = 'none';
            if(layoutImage) layoutImage.style.cursor = 'default';
            if (gridOverlay) gridOverlay.classList.add('show');
            if (layoutInfo) {
                layoutInfo.innerHTML = '<i class="fas fa-info-circle me-1"></i>點擊編輯模式開始配置設備位置';
                layoutInfo.style.background = 'rgba(13, 110, 253, 0.1)';
                layoutInfo.style.borderColor = 'rgba(13, 110, 253, 0.2)';
            }
            disableDragging();
        }
    }
    
    function enableDragging() {
        const markers = document.querySelectorAll('.sensor-marker, .device-marker');
        markers.forEach(marker => {
            marker.style.cursor = 'move';
            setupMouseDrag(marker);
        });
    }
    
    function disableDragging() {
        const markers = document.querySelectorAll('.sensor-marker, .device-marker');
        markers.forEach(marker => {
            marker.style.cursor = 'default';
            removeMouseDrag(marker);
        });
    }

    // --- FINAL DRAG LOGIC (Directly manipulating left/top for debugging) ---
    // This version removes `transform` entirely to test if it's the cause of CSS conflicts or perceived lag.
    let draggedElement = null;
    let dragContext = null; 

    function setupMouseDrag(element) {
        element.addEventListener('mousedown', onDragStart, { passive: false });
    }

    function removeMouseDrag(element) {
        element.removeEventListener('mousedown', onDragStart);
    }

    function onDragStart(e) {
        if (!editMode || e.button !== 0 || !layoutImage) return;

        e.preventDefault();
        
        draggedElement = e.currentTarget;
        const imageRect = layoutImage.getBoundingClientRect();
        
        dragContext = {
            imageRect: imageRect,
            initialMouseX: e.clientX,
            initialMouseY: e.clientY,
            initialLeftPercent: parseFloat(draggedElement.style.left),
            initialTopPercent: parseFloat(draggedElement.style.top)
        };

        document.addEventListener('mousemove', onDragMove, { passive: false });
        document.addEventListener('mouseup', onDragEnd, { once: true });

        draggedElement.classList.add('dragging');
    }

    function onDragMove(e) {
        e.preventDefault();
        if (!draggedElement || !dragContext) return;

        const imageRect = dragContext.imageRect;
        const deltaX = e.clientX - dragContext.initialMouseX;
        const deltaY = e.clientY - dragContext.initialMouseY;

        const deltaXPercent = (deltaX / imageRect.width) * 100;
        const deltaYPercent = (deltaY / imageRect.height) * 100;

        let newXPercent = dragContext.initialLeftPercent + deltaXPercent;
        let newYPercent = dragContext.initialTopPercent + deltaYPercent;

        // Clamp values to stay within the image boundaries
        newXPercent = Math.max(0, Math.min(100, newXPercent));
        newYPercent = Math.max(0, Math.min(100, newYPercent));
        
        // Directly update left and top properties
        draggedElement.style.left = newXPercent + '%';
        draggedElement.style.top = newYPercent + '%';
    }

    function onDragEnd(e) {
        if (!dragContext) {
            draggedElement = null;
            return;
        };
        document.removeEventListener('mousemove', onDragMove);
        
        if (!draggedElement) return;

        // The element is already at its final position from the last onDragMove event
        const finalXPercent = parseFloat(draggedElement.style.left);
        const finalYPercent = parseFloat(draggedElement.style.top);

        draggedElement.classList.remove('dragging');

        console.log('✅ 拖拽完成:', { id: draggedElement.dataset.id, x: finalXPercent, y: finalYPercent });
        
        const type = draggedElement.dataset.type;
        const id = draggedElement.dataset.id;
        
        const collection = type === 'sensor' ? sensors : devices;
        const item = collection.find(i => i.id === id);
        if (item) {
            item.x = finalXPercent;
            item.y = finalYPercent;
            console.log(`📊 已更新${type}位置:`, item);
        }
        
        draggedElement = null;
        dragContext = null;
    }
    // --- END OF FINAL DRAG LOGIC ---
    
    function addItem(type) {
        const name = prompt(`請輸入${type === 'sensor' ? '感測器' : '設備'}名稱:`);
        if (!name) return;
        
        const itemType = prompt(`請輸入${type === 'sensor' ? '感測器' : '設備'}類型:`);
        if (!itemType) return;
        
        const deviceName = prompt(`請輸入 MQTT 設備名稱 (用於 device/設備名稱/# 主題):`);
        if (!deviceName) return;
        
        const item = {
            id: Date.now().toString(),
            name: name,
            type: itemType,
            x: 50,
            y: 50,
            deviceName: deviceName,
            status: 'offline'
        };
        
        if (type === 'sensor') {
            sensors.push(item);
        } else {
            devices.push(item);
        }
        
        renderItems();
    }
    
    function renderItems() {
        const sensorsContainer = document.getElementById('sensors-container');
        const devicesContainer = document.getElementById('devices-container');
        
        if (!sensorsContainer || !devicesContainer) return;

        sensorsContainer.innerHTML = '';
        devicesContainer.innerHTML = '';
        
        sensors.forEach(sensor => {
            const marker = document.createElement('div');
            marker.className = 'sensor-marker';
            marker.style.position = 'absolute';
            marker.style.left = sensor.x + '%';
            marker.style.top = sensor.y + '%';
            marker.dataset.type = 'sensor';
            marker.dataset.id = sensor.id;
            marker.dataset.sensorType = sensor.type;
            const displayName = sensor.description || sensor.name;
            marker.title = displayName;
            
            const icon = getSensorIcon(sensor.type);
            const statusClass = sensor.status === 'online' ? 'text-success' : 'text-secondary';
            
            let markerHTML = '<div class="sensor-display">' +
                '<div class="sensor-icon">' +
                    '<i class="' + icon + ' ' + statusClass + '"></i>' +
                '</div>' +
                '<div class="sensor-name">' + displayName + '</div>';
            
            if (sensor.lastValue && sensor.lastValue.currentValues) {
                markerHTML += '<div class="sensor-values">';
                sensor.lastValue.currentValues.forEach(value => {
                    markerHTML += '<div class="sensor-value">' +
                        '<span class="value">' + value.value + '</span>' +
                        '<span class="unit">' + value.unit + '</span>' +
                    '</div>';
                });
                markerHTML += '</div>';
            }
            
            markerHTML += '</div>';
            marker.innerHTML = markerHTML;
            sensorsContainer.appendChild(marker);
        });
        
        devices.forEach(device => {
            const marker = document.createElement('div');
            marker.className = 'device-marker';
            marker.style.position = 'absolute';
            marker.style.left = device.x + '%';
            marker.style.top = device.y + '%';
            marker.dataset.type = 'device';
            marker.dataset.id = device.id;
            marker.title = device.name;
            marker.innerHTML = '<i class="fas fa-fan text-warning"></i>';
            devicesContainer.appendChild(marker);
        });
        
        if (editMode) {
            enableDragging();
        }
    }
    
    function saveLayout() {
        console.log('💾 開始儲存佈局資料:', {
            farmId: farmId,
            sensorsCount: sensors.length,
            devicesCount: devices.length,
            url: `/farms/${farmId}/sensors-devices`
        });
        
        fetch(`/farms/${farmId}/sensors-devices`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                sensors: sensors,
                devices: devices
            })
        })
        .then(response => {
            console.log('📨 收到佈局儲存回應:', response.status, response.statusText);
            return response.json();
        })
        .then(data => {
            console.log('📄 回應資料:', data);
            if (data.success) {
                console.log('✅ 佈局儲存成功');
                alert('佈局已儲存！');
                location.reload();
            } else {
                console.log('❌ 佈局儲存失敗:', data.error);
                alert('儲存失敗：' + (data.error || '未知錯誤'));
            }
        })
        .catch(error => {
            console.error('❌ 佈局儲存錯誤:', error);
            alert('儲存失敗，請重試。錯誤：' + error.message);
        });
    }
    
    function getSensorIcon(sensorType) {
        const iconMap = {
            'temperature': 'fas fa-thermometer-half',
            'humidity': 'fas fa-tint',
            'co2': 'fas fa-smog',
            'pressure': 'fas fa-gauge-high',
            'wind': 'fas fa-wind',
            'water': 'fas fa-droplet',
            'sensor': 'fas fa-microchip',
            'unknown': 'fas fa-question-circle'
        };
        return iconMap[sensorType] || iconMap['sensor'];
    }
    
    function startSensorDataRefresh() {
        setInterval(async () => {
            try {
                const response = await fetch(`/api/farms/${farmId}/sensors`);
                if (response.ok) {
                    const sensorData = await response.json();
                    updateSensorData(sensorData);
                }
            } catch (error) {
                console.error('更新感測器資料失敗:', error);
            }
        }, 10000);
    }
    
    function updateSensorData(sensorData) {
        sensorData.forEach(updatedSensor => {
            const existingSensor = sensors.find(s => s.deviceName === updatedSensor.deviceName);
            if (existingSensor) {
                existingSensor.lastValue = updatedSensor.lastValue;
                existingSensor.status = updatedSensor.status;
            }
        });
        renderItems();
    }
    
    try {
        console.log('🔧 初始化圖片上傳功能...');
        const uploadForm = document.getElementById('uploadForm');
        const uploadBtn = document.getElementById('uploadBtn');
        const uploadBtnText = document.getElementById('uploadBtnText');
        const uploadingText = document.getElementById('uploadingText');
        const layoutImageInput = document.getElementById('layoutImageInput');
        
        if (uploadForm && uploadBtn) {
            uploadBtn.addEventListener('click', function(e) {
                e.preventDefault();
                handleUpload();
            });
            
            uploadForm.addEventListener('submit', function(e) {
                e.preventDefault();
                handleUpload();
            });
            
            function handleUpload() {
                const file = layoutImageInput.files[0];
                if (!file) {
                    alert('請選擇要上傳的圖片檔案');
                    return;
                }
                if (file.size > 5 * 1024 * 1024) {
                    alert('檔案大小不能超過 5MB');
                    return;
                }
                if (!file.type.startsWith('image/')) {
                    alert('請選擇有效的圖片檔案 (JPG, PNG, GIF)');
                    return;
                }
                
                uploadBtn.disabled = true;
                uploadBtnText.classList.add('d-none');
                uploadingText.classList.remove('d-none');
                
                const formData = new FormData();
                formData.append('layout_image', file);
                
                fetch(uploadForm.action, {
                    method: 'POST',
                    body: formData
                })
                .then(response => {
                    if (response.ok) {
                        window.location.reload();
                    } else {
                        return response.text().then(text => { throw new Error(`HTTP ${response.status}: ${text}`); });
                    }
                })
                .catch(error => {
                    console.error('❌ 上傳失敗:', error);
                    alert('上傳失敗: ' + error.message);
                    uploadBtn.disabled = false;
                    uploadBtnText.classList.remove('d-none');
                    uploadingText.classList.add('d-none');
                });
            }
            
            layoutImageInput.addEventListener('change', function(e) {
                const file = e.target.files[0];
                if (file && file.type.startsWith('image/')) {
                    const oldPreview = document.getElementById('upload-preview');
                    if (oldPreview) oldPreview.remove();
                    
                    const reader = new FileReader();
                    reader.onload = function(e) {
                        const preview = document.createElement('img');
                        preview.id = 'upload-preview';
                        preview.src = e.target.result;
                        preview.className = 'img-fluid mt-2 border rounded';
                        preview.style.maxHeight = '200px';
                        preview.style.maxWidth = '100%';
                        layoutImageInput.parentNode.insertAdjacentElement('afterend', preview);
                    };
                    reader.readAsDataURL(file);
                }
            });
        }
    } catch (error) {
        console.error('❌ 初始化上傳功能時發生錯誤:', error);
    }
    
    try {
        console.log('🔧 初始化感測器資料顯示...');
        renderItems();
        startSensorDataRefresh();
        console.log('✅ 感測器資料自動更新已啟動');
    } catch (error) {
        console.error('❌ 初始化感測器功能時發生錯誤:', error);
    }
});
</script>

