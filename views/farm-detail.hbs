<div class="row">
    <!-- 基本資訊 -->
    <div class="col-lg-6 mb-4">
        <div class="card h-100">
            <div class="card-header d-flex justify-content-between align-items-center">
                <h5 class="mb-0"><i class="fas fa-info-circle me-2"></i>基本資訊</h5>
                <a href="/farms/{{farm._id}}/edit" class="btn btn-sm btn-outline-primary">
                    <i class="fas fa-edit me-1"></i>編輯
                </a>
            </div>
            <div class="card-body">
                <p><strong>IP 位址:</strong> {{farm.ip}}</p>
                <p><strong>狀態:</strong> <span class="badge {{statusBadge farm.status}}">{{farm.status}}</span></p>
                <p><strong>建立時間:</strong> {{formatDate farm.created_at}}</p>
                <p><strong>最後更新:</strong> {{formatDate farm.updated_at}}</p>
            </div>
        </div>
    </div>

    <!-- 即時影像輪播 (新) -->
    <div class="col-lg-6 mb-4">
        <div class="card h-100">
            <div class="card-header">
                <h5 class="mb-0"><i class="fas fa-sync-alt me-2"></i>即時影像輪播</h5>
            </div>
            <div class="card-body p-0 d-flex align-items-center justify-content-center">
                <div id="camera-carousel-container" style="width: 100%; height: 100%;">
                    <!-- 輪播元件將插入此處 -->
                </div>
            </div>
        </div>
    </div>
</div>


<div class="row">
    <!-- 場域佈局 -->
    <div class="col-lg-12 mb-4">
        <div class="card">
            <div class="card-header">
                <h5 class="mb-0">
                    <i class="fas fa-image me-2"></i>場域佈局圖
                </h5>
            </div>
            <div class="card-body p-0">
                {{#if farm.layout_image}}
                <!-- 佈局圖外框 -->
                <div class="layout-wrapper">
                    <div class="layout-container-enhanced">
                        <div class="layout-image-container">
                            <img id="layout-image" src="/uploads/{{farm.layout_image}}" alt="場域佈局圖">
                            
                            <!-- 感測器標記容器（由JavaScript動態生成） -->
                            <div id="sensors-container" class="markers-layer">
                                <!-- 感測器標記將由JavaScript動態生成 -->
                            </div>
                            
                            <!-- 設備標記容器（由JavaScript動態生成） -->
                            <div id="devices-container" class="markers-layer">
                                <!-- 設備標記將由JavaScript動態生成 -->
                            </div>
                            
                            <!-- 格線背景 -->
                            <div class="grid-overlay" id="grid-overlay"></div>
                        </div>
                        

                    </div>
                </div>
                
                <!-- 工具列 -->
                <div class="layout-toolbar">
                    <div class="d-flex justify-content-between align-items-center">
                        <div class="btn-group" role="group">
                            <button type="button" class="btn btn-outline-primary" id="edit-mode-btn">
                                <i class="fas fa-edit me-1"></i>編輯模式
                            </button>
                            <button type="button" class="btn btn-outline-success" id="add-sensor-btn" disabled>
                                <i class="fas fa-plus me-1"></i>新增感測器
                            </button>
                            <button type="button" class="btn btn-outline-warning" id="add-device-btn" disabled>
                                <i class="fas fa-plus me-1"></i>新增設備
                            </button>
                        </div>
                        <div class="d-flex align-items-center">
                            <button type="button" class="btn btn-success me-3" id="save-layout-btn" style="display: none;">
                                <i class="fas fa-save me-1"></i>儲存佈局
                            </button>
                            <span class="text-muted small" id="layout-info">
                                <i class="fas fa-info-circle me-1"></i>點擊編輯模式開始配置設備位置
                            </span>
                        </div>
                    </div>
                </div>
                {{else}}
                <div class="text-center py-5">
                    <i class="fas fa-upload fa-3x text-muted mb-3"></i>
                    <h5 class="text-muted">尚未上傳場域佈局圖</h5>
                    <p class="text-muted">請上傳場域的平面圖以便進行設備和感測器的配置</p>
                </div>
                {{/if}}
                
                <!-- 上傳新圖片 -->
                <form action="/farms/{{farm._id}}/upload-layout" method="post" enctype="multipart/form-data" class="mt-3" id="uploadForm">
                    <div class="input-group">
                        <input type="file" class="form-control" name="layout_image" accept="image/*" required id="layoutImageInput">
                        <button type="button" class="btn btn-primary" id="uploadBtn">
                            <span id="uploadBtnText">
                                <i class="fas fa-upload me-1"></i>{{#if farm.layout_image}}更換圖片{{else}}上傳圖片{{/if}}
                            </span>
                            <span id="uploadingText" class="d-none">
                                <i class="fas fa-spinner fa-spin me-1"></i>上傳中...
                            </span>
                        </button>
                    </div>
                    <div class="form-text">支援格式：JPG, PNG, GIF (最大 5MB)</div>
                </form>
            </div>
        </div>
    </div>
</div>

<!-- 攝影機輪播設定 (新) -->
<div class="row">
    <div class="col-12 mb-4">
        <div class="card">
            <div class="card-header">
                <h5 class="mb-0"><i class="fas fa-video me-2"></i>攝影機輪播設定</h5>
            </div>
            <div class="card-body">
                <div id="carousel-settings-container">
                    <p class="text-muted">正在載入分配至此場域的攝影機...</p>
                </div>
            </div>
            <div class="card-footer text-end">
                <button id="save-carousel-btn" class="btn btn-primary" disabled>
                    <i class="fas fa-save me-1"></i> 儲存輪播設定
                </button>
            </div>
        </div>
    </div>
</div>


<!-- WebSocket 和感測器/設備互動的 JavaScript -->
<script src="/socket.io/socket.io.js"></script>
<script src="https://cdn.jsdelivr.net/npm/hls.js@latest"></script>
<script>
// 2D 佈局編輯功能
document.addEventListener('DOMContentLoaded', function() {
    const farmId = '{{farm._id}}';
    let editMode = false;
    let sensors = {{{json farm.sensors}}};
    let devices = {{{json farm.devices}}};
    
    // 將 sensors 設為全域變數，供其他函數使用
    window.farmSensors = sensors;
    window.farmDevices = devices;
    
    const editModeBtn = document.getElementById('edit-mode-btn');
    const addSensorBtn = document.getElementById('add-sensor-btn');
    const addDeviceBtn = document.getElementById('add-device-btn');
    const saveLayoutBtn = document.getElementById('save-layout-btn');
    const layoutImage = document.getElementById('layout-image');

    const style = document.createElement('style');
    style.innerHTML = `
        .dragging {
            cursor: grabbing !important;
            z-index: 1000;
            pointer-events: none;
        }
    `;
    document.head.appendChild(style);
    
    if (editModeBtn) {
        editModeBtn.addEventListener('click', toggleEditMode);
    }
    
    if (addSensorBtn) {
        addSensorBtn.addEventListener('click', () => addItem('sensor'));
    }
    
    if (addDeviceBtn) {
        addDeviceBtn.addEventListener('click', () => addItem('device'));
    }
    
    if (saveLayoutBtn) {
        saveLayoutBtn.addEventListener('click', saveLayout);
    }
    
    function toggleEditMode() {
        editMode = !editMode;
        const gridOverlay = document.getElementById('grid-overlay');
        const layoutInfo = document.getElementById('layout-info');
        
        if (editMode) {
            editModeBtn.innerHTML = '<i class="fas fa-times me-1"></i>退出編輯';
            editModeBtn.className = 'btn btn-danger';
            addSensorBtn.disabled = false;
            addDeviceBtn.disabled = false;
            saveLayoutBtn.style.display = 'inline-block';
            if(layoutImage) layoutImage.style.cursor = 'crosshair';
            if (gridOverlay) gridOverlay.classList.remove('show');
            if (layoutInfo) {
                layoutInfo.innerHTML = '<i class="fas fa-edit me-1"></i>編輯模式：拖動設備調整位置';
                layoutInfo.style.background = 'rgba(40, 167, 69, 0.1)';
                layoutInfo.style.borderColor = 'rgba(40, 167, 69, 0.2)';
            }
            enableDragging();
        } else {
            editModeBtn.innerHTML = '<i class="fas fa-edit me-1"></i>編輯模式';
            editModeBtn.className = 'btn btn-outline-primary';
            addSensorBtn.disabled = true;
            addDeviceBtn.disabled = true;
            saveLayoutBtn.style.display = 'none';
            if(layoutImage) layoutImage.style.cursor = 'default';
            if (gridOverlay) gridOverlay.classList.add('show');
            if (layoutInfo) {
                layoutInfo.innerHTML = '<i class="fas fa-info-circle me-1"></i>點擊編輯模式開始配置設備位置';
                layoutInfo.style.background = 'rgba(13, 110, 253, 0.1)';
                layoutInfo.style.borderColor = 'rgba(13, 110, 253, 0.2)';
            }
            disableDragging();
        }
    }
    
    function enableDragging() {
        const markers = document.querySelectorAll('.sensor-marker, .device-marker');
        markers.forEach(marker => {
            marker.style.cursor = 'move';
            setupMouseDrag(marker);
        });
    }
    
    function disableDragging() {
        const markers = document.querySelectorAll('.sensor-marker, .device-marker');
        markers.forEach(marker => {
            marker.style.cursor = 'default';
            removeMouseDrag(marker);
        });
    }

    // --- FINAL DRAG LOGIC (Directly manipulating left/top for debugging) ---
    // This version removes `transform` entirely to test if it's the cause of CSS conflicts or perceived lag.
    let draggedElement = null;
    let dragContext = null; 

    function setupMouseDrag(element) {
        element.addEventListener('mousedown', onDragStart, { passive: false });
    }

    function removeMouseDrag(element) {
        element.removeEventListener('mousedown', onDragStart);
    }

    function onDragStart(e) {
        if (!editMode || e.button !== 0 || !layoutImage) return;

        e.preventDefault();
        
        draggedElement = e.currentTarget;
        const imageRect = layoutImage.getBoundingClientRect();
        
        dragContext = {
            imageRect: imageRect,
            initialMouseX: e.clientX,
            initialMouseY: e.clientY,
            initialLeftPercent: parseFloat(draggedElement.style.left),
            initialTopPercent: parseFloat(draggedElement.style.top)
        };

        document.addEventListener('mousemove', onDragMove, { passive: false });
        document.addEventListener('mouseup', onDragEnd, { once: true });

        draggedElement.classList.add('dragging');
    }

    function onDragMove(e) {
        e.preventDefault();
        if (!draggedElement || !dragContext) return;

        const imageRect = dragContext.imageRect;
        const deltaX = e.clientX - dragContext.initialMouseX;
        const deltaY = e.clientY - dragContext.initialMouseY;

        const deltaXPercent = (deltaX / imageRect.width) * 100;
        const deltaYPercent = (deltaY / imageRect.height) * 100;

        let newXPercent = dragContext.initialLeftPercent + deltaXPercent;
        let newYPercent = dragContext.initialTopPercent + deltaYPercent;

        // Clamp values to stay within the image boundaries
        newXPercent = Math.max(0, Math.min(100, newXPercent));
        newYPercent = Math.max(0, Math.min(100, newYPercent));
        
        // Directly update left and top properties
        draggedElement.style.left = newXPercent + '%';
        draggedElement.style.top = newYPercent + '%';
    }

    function onDragEnd(e) {
        if (!dragContext) {
            draggedElement = null;
            return;
        };
        document.removeEventListener('mousemove', onDragMove);
        
        if (!draggedElement) return;

        // The element is already at its final position from the last onDragMove event
        const finalXPercent = parseFloat(draggedElement.style.left);
        const finalYPercent = parseFloat(draggedElement.style.top);

        draggedElement.classList.remove('dragging');

        console.log('✅ 拖拽完成:', { id: draggedElement.dataset.id, x: finalXPercent, y: finalYPercent });
        
        const type = draggedElement.dataset.type;
        const id = draggedElement.dataset.id;
        
        const collection = type === 'sensor' ? sensors : devices;
        const item = collection.find(i => i.id === id);
        if (item) {
            item.x = finalXPercent;
            item.y = finalYPercent;
            console.log(`📊 已更新${type}位置:`, item);
        }
        
        draggedElement = null;
        dragContext = null;
    }
    // --- END OF FINAL DRAG LOGIC ---
    
    function addItem(type) {
        const name = prompt(`請輸入${type === 'sensor' ? '感測器' : '設備'}名稱:`);
        if (!name) return;
        
        const itemType = prompt(`請輸入${type === 'sensor' ? '感測器' : '設備'}類型:`);
        if (!itemType) return;
        
        const deviceName = prompt(`請輸入 MQTT 設備名稱 (用於 device/設備名稱/# 主題):`);
        if (!deviceName) return;
        
        const item = {
            id: Date.now().toString(),
            name: name,
            type: itemType,
            x: 50,
            y: 50,
            deviceName: deviceName,
            status: 'offline'
        };
        
        if (type === 'sensor') {
            sensors.push(item);
        } else {
            devices.push(item);
        }
        
        renderItems();
    }
    
    function renderItems() {
        const sensorsContainer = document.getElementById('sensors-container');
        const devicesContainer = document.getElementById('devices-container');
        
        if (!sensorsContainer || !devicesContainer) return;

        sensorsContainer.innerHTML = '';
        devicesContainer.innerHTML = '';
        
        sensors.forEach(sensor => {
            const marker = document.createElement('div');
            marker.className = 'sensor-marker';
            marker.style.position = 'absolute';
            marker.style.left = sensor.x + '%';
            marker.style.top = sensor.y + '%';
            marker.dataset.type = 'sensor';
            marker.dataset.id = sensor.id;
            marker.dataset.sensorType = sensor.type;
            
            // 優先使用 description 作為感測器識別名稱，如果沒有則使用 name
            const displayName = sensor.description || sensor.name;
            marker.title = displayName;
            
            // 使用與 dashboard 一致的感測器卡片樣式
            const isActive = sensor.lastValue && sensor.lastValue.currentValues;
            const statusClass = isActive ? 'active' : 'inactive';
            
            let markerHTML = '<div class="sensor-card ' + statusClass + '">' +
                '<div class="sensor-info">' +
                    '<div class="sensor-name">' + displayName + '</div>';
            
            // 顯示感測器數值（如果有）
            if (isActive) {
                markerHTML += '<div class="sensor-values">';
                sensor.lastValue.currentValues.forEach(value => {
                    markerHTML += '<div class="sensor-value-inline">' +
                        '<span class="value">' + value.value + '</span>' +
                        '<span class="unit">' + value.unit + '</span>' +
                    '</div>';
                });
                markerHTML += '</div>';
                
                // 檢查感測器數值是否異常並應用警報樣式
                setTimeout(() => {
                    const sensorCard = marker.querySelector('.sensor-card');
                    if (sensorCard && window.sensorAlertSystem) {
                        // 檢查每個數值
                        sensor.lastValue.currentValues.forEach(value => {
                            const alertInfo = window.sensorAlertSystem.checkSensorValue(sensor.id, sensor.type, value.value, value.unit);
                            if (alertInfo.isAbnormal) {
                                window.sensorAlertSystem.applyAlertStyle(sensorCard, alertInfo);
                            }
                        });
                    }
                }, 100);
            } else {
                // 顯示離線狀態
                markerHTML += '<div class="sensor-status">離線</div>';
            }
            
            markerHTML += '</div></div>';
            marker.innerHTML = markerHTML;
            sensorsContainer.appendChild(marker);
        });
        
        devices.forEach(device => {
            const marker = document.createElement('div');
            marker.className = 'device-marker';
            marker.style.position = 'absolute';
            marker.style.left = device.x + '%';
            marker.style.top = device.y + '%';
            marker.dataset.type = 'device';
            marker.dataset.id = device.id;
            marker.title = device.name;
            marker.innerHTML = '<i class="fas fa-fan text-warning"></i>';
            devicesContainer.appendChild(marker);
        });
        
        if (editMode) {
            enableDragging();
        }
    }
    
    function saveLayout() {
        console.log('💾 開始儲存佈局資料:', {
            farmId: farmId,
            sensorsCount: sensors.length,
            devicesCount: devices.length,
            url: `/farms/${farmId}/sensors-devices`
        });
        
        fetch(`/farms/${farmId}/sensors-devices`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                sensors: sensors,
                devices: devices
            })
        })
        .then(response => {
            console.log('📨 收到佈局儲存回應:', response.status, response.statusText);
            return response.json();
        })
        .then(data => {
            console.log('📄 回應資料:', data);
            if (data.success) {
                console.log('✅ 佈局儲存成功');
                alert('佈局已儲存！');
                location.reload();
            } else {
                console.log('❌ 佈局儲存失敗:', data.error);
                alert('儲存失敗：' + (data.error || '未知錯誤'));
            }
        })
        .catch(error => {
            console.error('❌ 佈局儲存錯誤:', error);
            alert('儲存失敗，請重試。錯誤：' + error.message);
        });
    }
    
    function getSensorIcon(sensorType) {
        const iconMap = {
            'temperature': 'fas fa-thermometer-half',
            'humidity': 'fas fa-tint',
            'co2': 'fas fa-smog',
            'pressure': 'fas fa-gauge-high',
            'wind': 'fas fa-wind',
            'water': 'fas fa-droplet',
            'sensor': 'fas fa-microchip',
            'unknown': 'fas fa-question-circle'
        };
        return iconMap[sensorType] || iconMap['sensor'];
    }
    
    function startSensorDataRefresh() {
        setInterval(async () => {
            try {
                const response = await fetch(`/api/farms/${farmId}/sensors`);
                if (response.ok) {
                    const sensorData = await response.json();
                    updateSensorData(sensorData);
                }
            } catch (error) {
                console.error('更新感測器資料失敗:', error);
            }
        }, 10000);
    }
    
    function updateSensorData(sensorData) {
        sensorData.forEach(updatedSensor => {
            const existingSensor = sensors.find(s => s.deviceName === updatedSensor.deviceName);
            if (existingSensor) {
                existingSensor.lastValue = updatedSensor.lastValue;
                existingSensor.status = updatedSensor.status;
                
                // 同步更新全域 sensors 資料
                const globalSensor = window.farmSensors ? window.farmSensors.find(s => s.deviceName === updatedSensor.deviceName) : null;
                if (globalSensor) {
                    globalSensor.lastValue = updatedSensor.lastValue;
                    globalSensor.status = updatedSensor.status;
                }
                
                // 更新感測器列表中的數據並檢查警報
                updateSensorListItem(existingSensor);
            }
        });
        renderItems();
    }
    
    // (updateSensorListItem 函數已移到全域作用域)
    
    try {
        console.log('🔧 初始化圖片上傳功能...');
        const uploadForm = document.getElementById('uploadForm');
        const uploadBtn = document.getElementById('uploadBtn');
        const uploadBtnText = document.getElementById('uploadBtnText');
        const uploadingText = document.getElementById('uploadingText');
        const layoutImageInput = document.getElementById('layoutImageInput');
        
        if (uploadForm && uploadBtn) {
            uploadBtn.addEventListener('click', function(e) {
                e.preventDefault();
                handleUpload();
            });
            
            uploadForm.addEventListener('submit', function(e) {
                e.preventDefault();
                handleUpload();
            });
            
            function handleUpload() {
                const file = layoutImageInput.files[0];
                if (!file) {
                    alert('請選擇要上傳的圖片檔案');
                    return;
                }
                if (file.size > 5 * 1024 * 1024) {
                    alert('檔案大小不能超過 5MB');
                    return;
                }
                if (!file.type.startsWith('image/')) {
                    alert('請選擇有效的圖片檔案 (JPG, PNG, GIF)');
                    return;
                }
                
                uploadBtn.disabled = true;
                uploadBtnText.classList.add('d-none');
                uploadingText.classList.remove('d-none');
                
                const formData = new FormData();
                formData.append('layout_image', file);
                
                fetch(uploadForm.action, {
                    method: 'POST',
                    body: formData
                })
                .then(response => {
                    if (response.ok) {
                        window.location.reload();
                    } else {
                        return response.text().then(text => { throw new Error(`HTTP ${response.status}: ${text}`); });
                    }
                })
                .catch(error => {
                    console.error('❌ 上傳失敗:', error);
                    alert('上傳失敗: ' + error.message);
                    uploadBtn.disabled = false;
                    uploadBtnText.classList.remove('d-none');
                    uploadingText.classList.add('d-none');
                });
            }
            
            layoutImageInput.addEventListener('change', function(e) {
                const file = e.target.files[0];
                if (file && file.type.startsWith('image/')) {
                    const oldPreview = document.getElementById('upload-preview');
                    if (oldPreview) oldPreview.remove();
                    
                    const reader = new FileReader();
                    reader.onload = function(e) {
                        const preview = document.createElement('img');
                        preview.id = 'upload-preview';
                        preview.src = e.target.result;
                        preview.className = 'img-fluid mt-2 border rounded';
                        preview.style.maxHeight = '200px';
                        preview.style.maxWidth = '100%';
                        layoutImageInput.parentNode.insertAdjacentElement('afterend', preview);
                    };
                    reader.readAsDataURL(file);
                }
            });
        }
    } catch (error) {
        console.error('❌ 初始化上傳功能時發生錯誤:', error);
    }
    
    try {
        console.log('🔧 初始化感測器資料顯示...');
        renderItems();
        
        // 初始化感測器列表的警報檢測
        initializeSensorListAlerts();
        
        startSensorDataRefresh();
        console.log('✅ 感測器資料自動更新已啟動');
    } catch (error) {
        console.error('❌ 初始化感測器功能時發生錯誤:', error);
    }
    
    // 初始化感測器列表的警報檢測
    function initializeSensorListAlerts() {
        // 初始化感測器圖示
        initializeSensorIcons();
        
        // 等待警報系統載入
        setTimeout(() => {
            if (window.sensorAlertSystem) {
                console.log('🔔 初始化感測器列表警報檢測...');
                sensors.forEach(sensor => {
                    if (sensor.lastValue && sensor.lastValue.currentValues) {
                        updateSensorListItem(sensor);
                    }
                });
                console.log('✅ 感測器列表警報檢測已啟動');
            } else {
                console.warn('⚠️ 警報系統未載入，跳過警報檢測初始化');
            }
        }, 1000);
    }
    
    // 初始化感測器圖示
    function initializeSensorIcons() {
        document.querySelectorAll('.sensor-list-item').forEach(item => {
            const sensorType = item.dataset.sensorType;
            const sensorId = item.dataset.sensorId;
            const icon = item.querySelector('i');
            if (icon && sensorType) {
                const iconClass = getSensorIcon(sensorType);
                icon.className = iconClass + ' me-2 text-primary';
            }
            
            // 檢查是否有個別配置並添加視覺指示器
            if (window.sensorAlertSystem && sensorId) {
                const hasIndividualConfig = window.sensorAlertSystem.getIndividualSensorConfig(sensorId);
                const configBtn = item.querySelector('.sensor-config-controls .btn');
                if (configBtn) {
                    if (hasIndividualConfig) {
                        configBtn.classList.add('has-individual-config');
                        configBtn.title = '已設定個別警報配置';
                    } else {
                        configBtn.classList.remove('has-individual-config');
                        configBtn.title = '設定個別警報';
                    }
                }
            }
        });
    }
});

// 更新感測器列表項目（全域函數）
function updateSensorListItem(sensor) {
    const listItem = document.querySelector(`[data-sensor-id="${sensor.id}"]`);
    if (!listItem) return;
    
    const valuesContainer = listItem.querySelector('.sensor-values-container');
    const alertIndicator = listItem.querySelector('.alert-status-indicator');
    
    // 清除舊的警報樣式
    listItem.classList.remove('alert-warning', 'alert-danger', 'alert-critical');
    
    if (sensor.lastValue && sensor.lastValue.currentValues) {
        // 更新數值顯示
        const valuesList = valuesContainer.querySelector('.sensor-values-list') || 
                          valuesContainer.appendChild(document.createElement('div'));
        valuesList.className = 'sensor-values-list';
        valuesList.innerHTML = '';
        
        let highestAlertLevel = 'normal';
        
        // 檢查每個數值並應用警報樣式
        sensor.lastValue.currentValues.forEach(value => {
            const valueBadge = document.createElement('div');
            valueBadge.className = 'sensor-value-badge';
            valueBadge.setAttribute('data-value', value.value);
            valueBadge.setAttribute('data-unit', value.unit);
            
            // 檢查警報狀態
            if (window.sensorAlertSystem) {
                const alertInfo = window.sensorAlertSystem.checkSensorValue(sensor.id, sensor.type, value.value, value.unit);
                if (alertInfo.isAbnormal) {
                    valueBadge.classList.add(alertInfo.level);
                    if (alertInfo.level === 'critical') {
                        highestAlertLevel = 'critical';
                    } else if (alertInfo.level === 'danger' && highestAlertLevel !== 'critical') {
                        highestAlertLevel = 'danger';
                    } else if (alertInfo.level === 'warning' && highestAlertLevel === 'normal') {
                        highestAlertLevel = 'warning';
                    }
                }
            }
            
            valueBadge.innerHTML = `
                <span class="value">${value.value}</span>
                <span class="unit">${value.unit}</span>
            `;
            valuesList.appendChild(valueBadge);
        });
        
        // 應用列表項目的警報樣式
        if (highestAlertLevel !== 'normal') {
            listItem.classList.add(`alert-${highestAlertLevel}`);
            
            // 顯示警報指示器
            alertIndicator.style.display = 'flex';
            const alertBadge = alertIndicator.querySelector('.alert-level-badge') || 
                              alertIndicator.appendChild(document.createElement('div'));
            alertBadge.className = `alert-level-badge ${highestAlertLevel}`;
            alertBadge.textContent = highestAlertLevel.toUpperCase();
            
            // 播放警報聲（僅限最高等級）
            if (window.sensorAlertSystem && highestAlertLevel === 'critical') {
                window.sensorAlertSystem.playAlertSound(highestAlertLevel);
            }
        } else {
            alertIndicator.style.display = 'none';
        }
        
        // 更新時間戳
        const timestampElement = valuesContainer.querySelector('.text-muted') || 
                               valuesContainer.appendChild(document.createElement('small'));
        timestampElement.className = 'text-muted d-block mt-1';
        timestampElement.textContent = `更新時間: ${new Date(sensor.lastValue.timestamp).toLocaleString('zh-TW')}`;
        
        // 隱藏離線狀態
        const offlineStatus = valuesContainer.querySelector('.sensor-offline-status');
        if (offlineStatus) {
            offlineStatus.style.display = 'none';
        }
        
    } else {
        // 顯示離線狀態
        valuesContainer.innerHTML = `
            <div class="sensor-offline-status">
                <span class="badge bg-secondary">離線</span>
                <small class="text-muted ms-2">無最新數據</small>
            </div>
        `;
        alertIndicator.style.display = 'none';
    }
}

// 個別感測器配置功能
function openSensorConfigModal(sensorId, description, name, type) {
    const modal = document.getElementById('sensorConfigModal');
    const form = document.getElementById('sensorConfigForm');
    
    // 設置模態標題
    document.getElementById('sensorConfigTitle').textContent = `設定感測器警報：${description || name}`;
    document.getElementById('configSensorId').value = sensorId;
    document.getElementById('configSensorType').value = type;
    
    // 檢查感測器的數值類型
    const sensor = window.farmSensors ? window.farmSensors.find(s => s.id === sensorId) : null;
    let valueTypes = [];
    
    if (sensor && sensor.lastValue && sensor.lastValue.currentValues) {
        valueTypes = sensor.lastValue.currentValues.map(value => {
            return {
                type: window.sensorAlertSystem?.getValueTypeByUnit(value.unit) || 'unknown',
                unit: value.unit,
                value: value.value
            };
        });
    }
    
    // 載入現有配置
    loadMultiValueSensorConfig(sensorId, type, valueTypes);
    
    // 顯示模態
    const bsModal = new bootstrap.Modal(modal);
    bsModal.show();
}

function loadMultiValueSensorConfig(sensorId, sensorType, valueTypes) {
    if (!window.sensorAlertSystem) return;
    
    const configContainer = document.getElementById('multiValueConfigContainer');
    configContainer.innerHTML = '';
    
    if (valueTypes.length <= 1) {
        // 單一數值類型，使用原有的配置方式
        loadSingleValueConfig(sensorId, sensorType, valueTypes[0]);
    } else {
        // 多數值類型，為每個數值類型創建配置區域
        valueTypes.forEach((valueInfo, index) => {
            createValueTypeConfigSection(sensorId, valueInfo, index);
        });
    }
}

function loadSingleValueConfig(sensorId, sensorType, valueInfo) {
    const valueType = valueInfo ? valueInfo.type : sensorType;
    
    // 獲取配置
    let config = window.sensorAlertSystem.getIndividualSensorValueConfig(sensorId, valueType);
    
    if (!config) {
        const defaultConfig = window.sensorAlertSystem.getAlertConfig();
        config = defaultConfig[valueType] || {
            normal: { min: 0, max: 100 },
            warning: { offset: 5 },
            danger: { offset: 10 },
            critical: { offset: 20 }
        };
    }
    
    // 創建單一配置區域
    const configContainer = document.getElementById('multiValueConfigContainer');
    configContainer.innerHTML = `
        <div class="single-value-config" data-value-type="${valueType}">
            <h6>${valueInfo ? `${getValueTypeName(valueType)} (${valueInfo.unit})` : sensorType}</h6>
            
            <div class="alert alert-info mb-3">
                <small><i class="fas fa-info-circle me-1"></i>
                設定正常範圍，然後設定超出正常範圍多少時觸發警報</small>
            </div>
            
            <div class="row mb-4">
                <div class="col-12">
                    <label class="form-label fw-bold">正常範圍</label>
                    <div class="input-group">
                        <input type="number" class="form-control normal-min" value="${config.normal?.min || 0}" step="0.1">
                        <span class="input-group-text">至</span>
                        <input type="number" class="form-control normal-max" value="${config.normal?.max || 100}" step="0.1">
                        <span class="input-group-text">${valueInfo?.unit || ''}</span>
                    </div>
                </div>
            </div>
            
            <div class="row mb-3">
                <div class="col-md-4">
                    <label class="form-label text-warning">警告偏差</label>
                    <div class="input-group">
                        <span class="input-group-text">±</span>
                        <input type="number" class="form-control warning-offset" value="${config.warning?.offset || 5}" step="0.1" min="0">
                        <span class="input-group-text">${valueInfo?.unit || ''}</span>
                    </div>
                    <small class="text-muted">超出正常範圍此數值時警告</small>
                </div>
                <div class="col-md-4">
                    <label class="form-label text-danger">危險偏差</label>
                    <div class="input-group">
                        <span class="input-group-text">±</span>
                        <input type="number" class="form-control danger-offset" value="${config.danger?.offset || 10}" step="0.1" min="0">
                        <span class="input-group-text">${valueInfo?.unit || ''}</span>
                    </div>
                    <small class="text-muted">超出正常範圍此數值時危險</small>
                </div>
                <div class="col-md-4">
                    <label class="form-label" style="color: #dc3545;">臨界偏差</label>
                    <div class="input-group">
                        <span class="input-group-text">±</span>
                        <input type="number" class="form-control critical-offset" value="${config.critical?.offset || 20}" step="0.1" min="0">
                        <span class="input-group-text">${valueInfo?.unit || ''}</span>
                    </div>
                    <small class="text-muted">超出正常範圍此數值時臨界</small>
                </div>
            </div>
        </div>
    `;
}

function createValueTypeConfigSection(sensorId, valueInfo, index) {
    const { type, unit, value } = valueInfo;
    
    // 獲取該數值類型的配置
    let config = window.sensorAlertSystem.getIndividualSensorValueConfig(sensorId, type);
    
    if (!config) {
        const defaultConfig = window.sensorAlertSystem.getAlertConfig();
        config = defaultConfig[type] || {
            normal: { min: 0, max: 100 },
            warning: { offset: 5 },
            danger: { offset: 10 },
            critical: { offset: 20 }
        };
    }
    
    const configContainer = document.getElementById('multiValueConfigContainer');
    const sectionHTML = `
        <div class="value-type-config mb-4" data-value-type="${type}">
            <div class="d-flex justify-content-between align-items-center mb-3">
                <h6 class="mb-0">${getValueTypeName(type)} (${unit})</h6>
                <small class="text-muted">目前數值: ${value} ${unit}</small>
            </div>
            
            <div class="alert alert-info mb-3">
                <small><i class="fas fa-info-circle me-1"></i>
                設定正常範圍，然後設定超出正常範圍多少時觸發警報</small>
            </div>
            
            <div class="row mb-4">
                <div class="col-12">
                    <label class="form-label fw-bold">正常範圍</label>
                    <div class="input-group">
                        <input type="number" class="form-control normal-min" value="${config.normal?.min || 0}" step="0.1">
                        <span class="input-group-text">至</span>
                        <input type="number" class="form-control normal-max" value="${config.normal?.max || 100}" step="0.1">
                        <span class="input-group-text">${unit}</span>
                    </div>
                </div>
            </div>
            
            <div class="row mb-3">
                <div class="col-md-4">
                    <label class="form-label text-warning">警告偏差</label>
                    <div class="input-group">
                        <span class="input-group-text">±</span>
                        <input type="number" class="form-control warning-offset" value="${config.warning?.offset || 5}" step="0.1" min="0">
                        <span class="input-group-text">${unit}</span>
                    </div>
                    <small class="text-muted">超出正常範圍此數值時警告</small>
                </div>
                <div class="col-md-4">
                    <label class="form-label text-danger">危險偏差</label>
                    <div class="input-group">
                        <span class="input-group-text">±</span>
                        <input type="number" class="form-control danger-offset" value="${config.danger?.offset || 10}" step="0.1" min="0">
                        <span class="input-group-text">${unit}</span>
                    </div>
                    <small class="text-muted">超出正常範圍此數值時危險</small>
                </div>
                <div class="col-md-4">
                    <label class="form-label" style="color: #dc3545;">臨界偏差</label>
                    <div class="input-group">
                        <span class="input-group-text">±</span>
                        <input type="number" class="form-control critical-offset" value="${config.critical?.offset || 20}" step="0.1" min="0">
                        <span class="input-group-text">${unit}</span>
                    </div>
                    <small class="text-muted">超出正常範圍此數值時臨界</small>
                </div>
            </div>
        </div>
    `;
    
    configContainer.insertAdjacentHTML('beforeend', sectionHTML);
}

function getValueTypeName(type) {
    const names = {
        temperature: '溫度',
        humidity: '濕度',
        co2: 'CO2濃度',
        pressure: '氣壓',
        wind: '風速',
        water: '水量',
        light: '光照',
        ph: 'pH值',
        noise: '噪音',
        unknown: '未知'
    };
    
    return names[type] || type;
}

function saveSensorConfig() {
    const sensorId = document.getElementById('configSensorId').value;
    const configSections = document.querySelectorAll('#multiValueConfigContainer .value-type-config, #multiValueConfigContainer .single-value-config');
    
    let hasAnyConfig = false;
    
    configSections.forEach(section => {
        const valueType = section.dataset.valueType;
        
        const config = {
            normal: {
                min: parseFloat(section.querySelector('.normal-min').value),
                max: parseFloat(section.querySelector('.normal-max').value)
            },
            warning: {
                offset: parseFloat(section.querySelector('.warning-offset').value)
            },
            danger: {
                offset: parseFloat(section.querySelector('.danger-offset').value)
            },
            critical: {
                offset: parseFloat(section.querySelector('.critical-offset').value)
            }
        };
        
        // 驗證配置
        if (!validateSensorValueConfig(config, valueType)) {
            return;
        }
        
        // 儲存該數值類型的配置
        if (window.sensorAlertSystem) {
            window.sensorAlertSystem.setIndividualSensorValueConfig(sensorId, valueType, config);
            hasAnyConfig = true;
        }
    });
    
    if (hasAnyConfig) {
        // 重新檢查該感測器的警報狀態
        const sensor = window.farmSensors ? window.farmSensors.find(s => s.id === sensorId) : null;
        if (sensor && sensor.lastValue && sensor.lastValue.currentValues) {
            updateSensorListItem(sensor);
        }
        
        // 更新配置指示器
        updateConfigIndicator(sensorId, true);
        
        alert('感測器警報配置已儲存！');
        
        // 關閉模態
        const modal = bootstrap.Modal.getInstance(document.getElementById('sensorConfigModal'));
        modal.hide();
    }
}

function resetToDefaultConfig() {
    const sensorId = document.getElementById('configSensorId').value;
    const sensorType = document.getElementById('configSensorType').value;
    
    // 檢查感測器的數值類型
    const sensor = window.farmSensors ? window.farmSensors.find(s => s.id === sensorId) : null;
    let valueTypes = [];
    
    if (sensor && sensor.lastValue && sensor.lastValue.currentValues) {
        valueTypes = sensor.lastValue.currentValues.map(value => {
            return {
                type: window.sensorAlertSystem?.getValueTypeByUnit(value.unit) || 'unknown',
                unit: value.unit,
                value: value.value
            };
        });
    }
    
    // 重新載入預設配置
    loadMultiValueSensorConfig(null, sensorType, valueTypes);
}

function removeIndividualConfig() {
    const sensorId = document.getElementById('configSensorId').value;
    
    if (confirm('確定要刪除此感測器的個別配置，並使用類型預設配置嗎？')) {
        if (window.sensorAlertSystem) {
            window.sensorAlertSystem.removeIndividualSensorConfig(sensorId);
            
            // 重新檢查該感測器的警報狀態
            const sensor = window.farmSensors ? window.farmSensors.find(s => s.id === sensorId) : null;
            if (sensor && sensor.lastValue && sensor.lastValue.currentValues) {
                updateSensorListItem(sensor);
            }
            
            // 更新配置指示器
            updateConfigIndicator(sensorId, false);
            
            alert('個別配置已刪除！');
            
            // 關閉模態
            const modal = bootstrap.Modal.getInstance(document.getElementById('sensorConfigModal'));
            modal.hide();
        }
    }
}

function validateSensorValueConfig(config, valueType) {
    const typeName = getValueTypeName(valueType);
    
    // 檢查正常範圍
    if (config.normal.min >= config.normal.max) {
        alert(`${typeName} 正常範圍設定錯誤：最小值必須小於最大值`);
        return false;
    }
    
    // 檢查偏差值必須為正數
    if (config.warning.offset < 0) {
        alert(`${typeName} 警告偏差不能為負數`);
        return false;
    }
    
    if (config.danger.offset < 0) {
        alert(`${typeName} 危險偏差不能為負數`);
        return false;
    }
    
    if (config.critical.offset < 0) {
        alert(`${typeName} 臨界偏差不能為負數`);
        return false;
    }
    
    // 檢查偏差遞增關係
    if (config.warning.offset >= config.danger.offset) {
        alert(`${typeName} 危險偏差必須大於警告偏差`);
        return false;
    }
    
    if (config.danger.offset >= config.critical.offset) {
        alert(`${typeName} 臨界偏差必須大於危險偏差`);
        return false;
    }
    
    return true;
}

function updateConfigIndicator(sensorId, hasConfig) {
    const listItem = document.querySelector(`[data-sensor-id="${sensorId}"]`);
    if (listItem) {
        const configBtn = listItem.querySelector('.sensor-config-controls .btn');
        if (configBtn) {
            if (hasConfig) {
                configBtn.classList.add('has-individual-config');
                configBtn.title = '已設定個別警報配置';
            } else {
                configBtn.classList.remove('has-individual-config');
                configBtn.title = '設定個別警報';
            }
        }
    }
}

// 存根函數：為了與其他頁面的兼容性而提供的空實現
function adjustOverlayToImage(img) {
    console.log('Farm Detail: adjustOverlayToImage 被調用，但在此頁面不執行任何操作');
}

document.addEventListener('DOMContentLoaded', function () {
    const farmId = '{{farm._id}}';
    const carouselContainer = document.getElementById('camera-carousel-container');
    const settingsContainer = document.getElementById('carousel-settings-container');
    const saveBtn = document.getElementById('save-carousel-btn');
    
    let carouselPlayers = [];

    const api = {
        get: (url) => fetch(url).then(res => res.json()),
        post: (url, body) => fetch(url, {
            method: 'POST',
            headers: {'Content-Type': 'application/json'},
            body: JSON.stringify(body)
        }).then(res => res.json())
    };

    const loadCarouselSettings = async () => {
        try {
            const res = await api.get(`/api/farms/${farmId}/cameras`);
            if (!res.success) {
                settingsContainer.innerHTML = '<p class="text-danger">無法載入攝影機列表。</p>';
                return;
            }

            const assignedCameras = res.cameras;
            const selectedCameras = {{{json farm.carouselCameras}}};

            if (assignedCameras.length === 0) {
                settingsContainer.innerHTML = '<p class="text-muted">沒有分配給此場域的攝影機。請先至<a href="/onvif-cameras">攝影機管理頁面</a>進行分配。</p>';
                return;
            }

            let checkboxesHTML = '<p>請選擇最多兩隻攝影機以在上方進行輪播顯示：</p>';
            assignedCameras.forEach(cam => {
                const isChecked = selectedCameras.includes(cam.ip);
                checkboxesHTML += `
                    <div class="form-check">
                        <input class="form-check-input carousel-cam-checkbox" type="checkbox" value="${cam.ip}" id="cam-${cam.ip.replace(/\./g, '-')}" ${isChecked ? 'checked' : ''}>
                        <label class="form-check-label" for="cam-${cam.ip.replace(/\./g, '-')}">
                            ${cam.hostname || cam.ip}
                        </label>
                    </div>
                `;
            });
            settingsContainer.innerHTML = checkboxesHTML;
            saveBtn.disabled = false;

            // 綁定 checkbox 限制選擇數量的事件
            const checkboxes = document.querySelectorAll('.carousel-cam-checkbox');
            checkboxes.forEach(checkbox => {
                checkbox.addEventListener('change', () => {
                    const checkedCount = document.querySelectorAll('.carousel-cam-checkbox:checked').length;
                    if (checkedCount > 2) {
                        showToast('warning', '最多只能選擇兩隻攝影機進行輪播。');
                        checkbox.checked = false;
                    }
                });
            });
        } catch (e) {
            settingsContainer.innerHTML = '<p class="text-danger">載入攝影機列表時發生錯誤。</p>';
        }
    };

    const saveCarouselSettings = async () => {
        const selectedIps = Array.from(document.querySelectorAll('.carousel-cam-checkbox:checked')).map(cb => cb.value);
        
        try {
            const res = await api.post(`/api/farms/${farmId}/carousel-cameras`, { cameraIps: selectedIps });
            if (res.success) {
                showToast('success', res.message);
                // 重新載入頁面以應用新的輪播設定
                location.reload();
            } else {
                showToast('error', `儲存失敗: ${res.error}`);
            }
        } catch (e) {
            showToast('error', '儲存設定時發生網路錯誤');
        }
    };

    const loadAndRenderCarousel = async () => {
        carouselContainer.innerHTML = '<div class="d-flex justify-content-center align-items-center h-100"><div class="spinner-border text-primary" role="status"><span class="visually-hidden">Loading...</span></div></div>';
        
        const selectedCameras = {{{json farm.carouselCameras}}};
        if (!selectedCameras || selectedCameras.length === 0) {
             carouselContainer.innerHTML = '<div class="text-muted d-flex justify-content-center align-items-center h-100 p-3">此場域尚未設定輪播攝影機。</div>';
             return;
        }

        carouselContainer.innerHTML = `
            <div id="farmCameraCarousel" class="carousel slide h-100" data-bs-ride="carousel">
                <div class="carousel-inner h-100">
                    ${selectedCameras.map((ip, index) => `
                        <div class="carousel-item h-100 ${index === 0 ? 'active' : ''}">
                            <video id="carousel-video-${ip.replace(/\./g, '-')}" class="d-block w-100 h-100" style="object-fit: cover; background-color: #000;" controls muted autoplay></video>
                            <div class="carousel-caption d-none d-md-block bg-dark bg-opacity-50 rounded px-2 py-1">
                                <h5 class="mb-0">${ip}</h5>
                            </div>
                        </div>
                    `).join('')}
                </div>
                ${selectedCameras.length > 1 ? `
                <button class="carousel-control-prev" type="button" data-bs-target="#farmCameraCarousel" data-bs-slide="prev">
                    <span class="carousel-control-prev-icon" aria-hidden="true"></span>
                    <span class="visually-hidden">Previous</span>
                </button>
                <button class="carousel-control-next" type="button" data-bs-target="#farmCameraCarousel" data-bs-slide="next">
                    <span class="carousel-control-next-icon" aria-hidden="true"></span>
                    <span class="visually-hidden">Next</span>
                </button>
                ` : ''}
            </div>
        `;
        
        // 啟動串流並播放
        startCarouselStreams(selectedCameras);
    };

    const startCarouselStreams = (ips) => {
        // 先停止舊的播放器
        carouselPlayers.forEach(player => {
            api.post(`/api/onvif/stream/stop/${player.ip}`);
            if (player.hls) player.hls.destroy();
        });
        carouselPlayers = [];

        ips.forEach(async (ip) => {
            const videoEl = document.getElementById(`carousel-video-${ip.replace(/\./g, '-')}`);
            if (!videoEl) return;

            try {
                const res = await api.post(`/api/onvif/stream/start/${ip}`);
                if (res.success) {
                    const hls = new Hls();
                    hls.loadSource(res.stream.playlistUrl);
                    hls.attachMedia(videoEl);
                    carouselPlayers.push({ ip, hls });
                } else {
                    console.error(`無法啟動輪播攝影機 ${ip} 的串流`);
                }
            } catch (e) {
                 console.error(`啟動輪播串流 ${ip} 失敗:`, e);
            }
        });
    };
    
    // 頁面離開時停止所有串流
    window.addEventListener('beforeunload', () => {
        carouselPlayers.forEach(player => {
            api.post(`/api/onvif/stream/stop/${player.ip}`);
        });
    });

    saveBtn.addEventListener('click', saveCarouselSettings);

    // 初始化
    loadCarouselSettings();
    loadAndRenderCarousel();
});

function showToast(type, message) {
    const toastContainer = document.getElementById('toast-container'); // 假設您有這個容器
    if (!toastContainer) {
        console.error('Toast container not found!');
        return;
    }

    const toast = document.createElement('div');
    const icon = type === 'success' ? 'fa-check-circle' : type === 'error' ? 'fa-times-circle' : 'fa-info-circle';
    toast.className = `alert alert-${type === 'error' ? 'danger' : type} alert-dismissible fade show`;
    toast.innerHTML = `<i class="fas ${icon} me-2"></i>${message}<button type="button" class="btn-close" data-bs-dismiss="alert"></button>`;
    toastContainer.appendChild(toast);
    setTimeout(() => bootstrap.Alert.getOrCreateInstance(toast).close(), 5000);
}

</script>

<!-- 個別感測器配置模態對話框 -->
<div class="modal fade" id="sensorConfigModal" tabindex="-1">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="sensorConfigTitle">感測器警報配置</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <form id="sensorConfigForm">
                    <input type="hidden" id="configSensorId">
                    <input type="hidden" id="configSensorType">
                    
                    <div class="alert alert-info">
                        <i class="fas fa-info-circle me-2"></i>
                        此配置僅適用於當前感測器的各個數值類型。如果未設定個別配置，將使用感測器類型的預設配置。
                    </div>
                    
                    <!-- 動態配置容器 -->
                    <div id="multiValueConfigContainer">
                        <!-- 配置區域將在這裡動態生成 -->
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-outline-danger" onclick="removeIndividualConfig()">
                    <i class="fas fa-trash me-1"></i>刪除個別配置
                </button>
                <button type="button" class="btn btn-outline-secondary" onclick="resetToDefaultConfig()">
                    <i class="fas fa-undo me-1"></i>重置為預設
                </button>
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">取消</button>
                <button type="button" class="btn btn-primary" onclick="saveSensorConfig()">
                    <i class="fas fa-save me-1"></i>儲存配置
                </button>
            </div>
        </div>
    </div>
</div>

