<!-- onvif-cameras.hbs (V2 Rewrite) -->

<style>
    .camera-grid {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(320px, 1fr));
        gap: 1.5rem;
    }
    .camera-card {
        transition: all 0.3s ease-in-out;
        border-width: 1px;
    }
    .camera-card:hover {
        transform: translateY(-5px);
        box-shadow: 0 4px 12px rgba(0,0,0,0.1);
    }
    .card-header .badge {
        font-size: 0.8rem;
    }
    .card-footer {
        background-color: #f8f9fa;
    }
    .status-dot {
        display: inline-block;
        width: 10px;
        height: 10px;
        border-radius: 50%;
        margin-right: 8px;
    }
    .status-saved { background-color: var(--bs-success); }
    .status-discovered { background-color: var(--bs-warning); }
    .status-streaming { background-color: var(--bs-danger); }
    .loading-shimmer {
        background: #f6f7f8;
        background-image: linear-gradient(to right, #f6f7f8 0%, #edeef1 20%, #f6f7f8 40%, #f6f7f8 100%);
        background-repeat: no-repeat;
        background-size: 800px 104px; 
        display: inline-block;
        position: relative; 
        animation: shimmer 1s infinite linear;
    }
    @keyframes shimmer {
        0%{ background-position: -468px 0; }
        100%{ background-position: 468px 0; }
    }
    .shimmer-card {
        border-color: #e9ecef;
    }
    #toast-container {
        position: fixed;
        top: 20px;
        right: 20px;
        z-index: 20000;
        min-width: 300px;
    }
</style>

<div class="row">
    <div class="col-12">
        <div class="d-flex justify-content-between align-items-center mb-4">
            <h2><i class="fas fa-video me-2"></i>ONVIF 攝影機管理</h2>
            <div>
                <button id="add-all-btn" class="btn btn-success me-2 d-none">
                    <span class="spinner-border spinner-border-sm d-none me-1" role="status" aria-hidden="true"></span>
                    <i class="fas fa-plus-circle me-1"></i>
                    全部新增
                </button>
                <button id="discover-btn" class="btn btn-primary">
                    <span class="spinner-border spinner-border-sm d-none me-1" role="status" aria-hidden="true"></span>
                    <i class="fas fa-search me-1"></i>
                    探索區域網路攝影機
                </button>
            </div>
        </div>
    </div>
</div>

<div id="camera-grid" class="camera-grid">
    <!-- 攝影機卡片將動態插入此處 -->
    <!-- 載入中骨架 -->
    <div id="loading-skeleton" class="d-none">
        <div class="card camera-card shimmer-card">
            <div class="card-body">
                <div class="h-100 loading-shimmer" style="height: 150px; width: 100%;"></div>
            </div>
        </div>
    </div>
</div>

<div id="empty-state" class="text-center py-5 d-none">
    <i class="fas fa-broadcast-tower fa-4x text-muted mb-3"></i>
    <h5 class="text-muted">未找到任何攝影機</h5>
    <p class="text-muted">請點擊右上角的「探索」按鈕來搜尋您網路中的ONVIF攝影機。</p>
</div>


<!-- 串流播放 Modal -->
<div class="modal fade" id="streamModal" tabindex="-1">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="streamModalTitle">攝影機串流</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body text-center bg-dark p-0">
                <video id="streamVideo" class="w-100" controls autoplay muted style="max-height: 60vh;"></video>
                <div id="stream-loading" class="text-white p-5 d-none">
                    <div class="spinner-border mb-3" role="status"></div>
                    <div>正在啟動串流，請稍候...</div>
            </div>
            </div>
        </div>
    </div>
</div>

<!-- 新增攝影機 Modal (用於有密碼的情況) -->
<div class="modal fade" id="addDeviceModal" tabindex="-1">
    <div class="modal-dialog">
        <form id="addDeviceForm" class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">新增攝影機</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                 <div class="alert alert-info">大部分攝影機可使用預設值直接新增。</div>
                 <input type="hidden" id="add-ip">
                 <input type="hidden" id="add-port">
                 <div class="mb-3">
                     <label class="form-label">IP 位址</label>
                     <input type="text" id="add-ip-display" class="form-control" disabled>
                 </div>
                 <div class="mb-3">
                     <label for="add-username" class="form-label">使用者名稱</label>
                     <input type="text" id="add-username" class="form-control" value="admin">
                 </div>
                 <div class="mb-3">
                     <label for="add-password" class="form-label">密碼</label>
                     <input type="password" id="add-password" class="form-control" placeholder="留空代表無密碼">
                 </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">取消</button>
                <button type="submit" class="btn btn-primary">確認新增</button>
            </div>
        </form>
    </div>
</div>

<!-- 分配場域 Modal -->
<div class="modal fade" id="assignFarmModal" tabindex="-1">
    <div class="modal-dialog">
        <form id="assignFarmForm" class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">分配場域</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                 <input type="hidden" id="assign-ip">
                 <p>請為攝影機 <strong id="assign-ip-display"></strong> 選擇一個場域：</p>
                 <div class="mb-3">
                     <label for="farm-select" class="form-label">可用場域</label>
                     <select id="farm-select" class="form-select" required>
                         <!-- 場域列表將動態載入 -->
                         <option value="">載入場域中...</option>
                     </select>
                 </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">取消</button>
                <button type="submit" class="btn btn-primary">確認分配</button>
            </div>
        </form>
    </div>
</div>

<!-- Toast 通知容器 -->
<div id="toast-container"></div>

<script src="https://cdn.jsdelivr.net/npm/hls.js@latest"></script>
<script>
document.addEventListener('DOMContentLoaded', () => {

    const cameraGrid = document.getElementById('camera-grid');
    const discoverBtn = document.getElementById('discover-btn');
    const addAllBtn = document.getElementById('add-all-btn');
    const loadingSkeleton = document.getElementById('loading-skeleton');
    const emptyState = document.getElementById('empty-state');
    
    const streamModalEl = document.getElementById('streamModal');
    const streamModal = new bootstrap.Modal(streamModalEl);
    const streamVideo = document.getElementById('streamVideo');
    const streamLoading = document.getElementById('stream-loading');
    
    const addDeviceModalEl = document.getElementById('addDeviceModal');
    const addDeviceModal = new bootstrap.Modal(addDeviceModalEl);
    const addDeviceForm = document.getElementById('addDeviceForm');

    const assignFarmModalEl = document.getElementById('assignFarmModal');
    const assignFarmModal = new bootstrap.Modal(assignFarmModalEl);
    const assignFarmForm = document.getElementById('assignFarmForm');

    let hls;

    // --- Core Functions ---

    const api = {
        get: (url) => fetch(url).then(res => res.json()),
        post: (url, body) => fetch(url, {
                    method: 'POST',
            headers: {'Content-Type': 'application/json'},
            body: JSON.stringify(body)
        }).then(res => res.json()),
        delete: (url) => fetch(url, { method: 'DELETE' }).then(res => res.json())
    };

    const render = (devices) => {
        cameraGrid.innerHTML = '';
        
        const discoveredDevices = devices.filter(d => d.status === 'discovered');
        if (discoveredDevices.length > 0) {
            addAllBtn.classList.remove('d-none');
        } else {
            addAllBtn.classList.add('d-none');
        }

        if (devices.length === 0) {
            emptyState.classList.remove('d-none');
            return;
        }
        emptyState.classList.add('d-none');
        devices.forEach(device => {
            const card = document.createElement('div');
            card.className = 'camera-card';
            card.innerHTML = createCardHTML(device);
            cameraGrid.appendChild(card);
        });
    };

    const loadDevices = async () => {
        showLoadingSkeleton();
        try {
            const res = await api.get('/api/onvif/devices');
            if (res.success) {
                render(res.devices);
            } else {
                showToast('error', res.error);
            }
        } catch (e) {
            showToast('error', '無法載入攝影機列表');
        } finally {
            hideLoadingSkeleton();
        }
    };
    
    const handleDiscover = async () => {
        setButtonLoading(discoverBtn, true);
        try {
            const res = await api.post('/api/onvif/discover');
            if (res.success) {
                render(res.devices);
                showToast('success', `探索完成，共找到 ${res.devices.length} 台設備`);
            } else {
                showToast('error', res.error);
            }
        } catch (e) {
            showToast('error', '探索時發生錯誤');
        } finally {
            setButtonLoading(discoverBtn, false);
        }
    };

    const handleAddAll = async () => {
        const res = await api.get('/api/onvif/devices');
        if (!res.success) {
            showToast('error', '無法獲取設備列表');
            return;
        }

        const discoveredDevices = res.devices.filter(d => d.status === 'discovered');
        if (discoveredDevices.length === 0) {
            showToast('info', '沒有可新增的攝影機');
            return;
        }

        if (!confirm(`確定要將 ${discoveredDevices.length} 台新發現的攝影機全部新增至系統嗎？`)) return;

        setButtonLoading(addAllBtn, true);
        let successCount = 0;
        let errorCount = 0;

        for (const device of discoveredDevices) {
            try {
                const addRes = await api.post('/api/onvif/devices', { ip: device.ip, port: device.port, username: 'admin', password: '' });
                if (addRes.success) {
                    successCount++;
                } else {
                    errorCount++;
                    showToast('error', `新增 ${device.ip} 失敗: ${addRes.error}`);
                }
            } catch (e) {
                errorCount++;
                showToast('error', `新增 ${device.ip} 時發生網路錯誤`);
            }
        }

        showToast('success', `批量新增完成！成功 ${successCount} 台，失敗 ${errorCount} 台。`);
        setButtonLoading(addAllBtn, false);
        loadDevices();
    };
    
    const handleAddDevice = async (ip, port, username, password) => {
        showToast('info', `正在新增攝影機 ${ip}...`);
        try {
            const res = await api.post('/api/onvif/devices', { ip, port, username, password });
            if (res.success) {
                showToast('success', `攝影機 ${ip} 已成功新增並儲存`);
                loadDevices(); // 重新載入列表
            } else {
                showToast('error', `新增失敗: ${res.error}`);
            }
        } catch (e) {
            showToast('error', '新增時發生網路錯誤');
        }
    };
    
    const handleRemoveDevice = async (ip) => {
        if (!confirm(`確定要從系統中移除攝影機 ${ip} 嗎？`)) return;
        try {
            const res = await api.delete(`/api/onvif/devices/${ip}`);
            if (res.success) {
                showToast('success', res.message);
                loadDevices(); // 重新載入列表
            } else {
                showToast('error', res.error);
            }
        } catch (e) {
            showToast('error', '移除時發生網路錯誤');
        }
    };
    
    const handleAssignFarm = async (ip, farmId, farmName) => {
        try {
            const res = await api.post(`/api/onvif/devices/${ip}/assign-farm`, { farmId, farmName });
            if (res.success) {
                showToast('success', res.message);
                loadDevices(); // 分配成功後重新載入列表以更新資訊
                return true; // 回傳成功狀態
            } else {
                showToast('error', `分配失敗: ${res.error}`);
                return false; // 回傳失敗狀態
            }
        } catch (e) {
            showToast('error', '分配場域時發生網路錯誤');
            return false; // 回傳失敗狀態
        }
    };

    const handlePlayStream = async (ip, port) => {
        streamLoading.classList.remove('d-none');
        streamVideo.classList.add('d-none');
        document.getElementById('streamModalTitle').textContent = `攝影機串流 - ${ip}`;
        streamModal.show();
        
        try {
            const res = await api.post(`/api/onvif/stream/start/${ip}`);
            if (res.success) {
                streamLoading.classList.add('d-none');
                streamVideo.classList.remove('d-none');
                playHLS(res.stream.playlistUrl);
        } else {
                streamModal.hide();
                showToast('error', `啟動串流失敗: ${res.error}`);
            }
        } catch (e) {
            streamModal.hide();
            showToast('error', '啟動串流時發生網路錯誤');
        }
    };
    
    const handleStopStream = async (ip) => {
        await api.post(`/api/onvif/stream/stop/${ip}`);
        if (hls) {
            hls.destroy();
            hls = null;
        }
    };

    // --- UI Helpers ---

    const createCardHTML = (device) => {
        const isSaved = device.status === 'saved';
        const badgeClass = isSaved ? 'status-saved' : 'status-discovered';
        const badgeText = isSaved ? '已儲存' : '新發現';

        let footer;
        if (isSaved) {
            footer = `
                <div class="btn-group w-100">
                    <button class="btn btn-sm btn-success" onclick="app.playStream('${device.ip}', ${device.port})"><i class="fas fa-play me-1"></i> 播放</button>
                    <button class="btn btn-sm btn-outline-info" onclick="app.showAssignModal('${device.ip}')"><i class="fas fa-industry me-1"></i> 分配</button>
                    <button class="btn btn-sm btn-outline-danger" onclick="app.removeDevice('${device.ip}')"><i class="fas fa-trash"></i></button>
                </div>
            `;
        } else {
            footer = `
                <button class="btn btn-sm btn-primary w-100" onclick="app.addDevice('${device.ip}', ${device.port})">
                    <i class="fas fa-plus me-1"></i> 新增至系統 (無密碼)
                </button>
                <button class="btn btn-sm btn-outline-secondary w-100 mt-2" onclick="app.showAddModal('${device.ip}', ${device.port})">
                    <i class="fas fa-key me-1"></i> 使用密碼新增
                </button>
            `;
        }
        
        return `
            <div class="card h-100">
                <div class="card-header d-flex justify-content-between align-items-center">
                    <h6 class="mb-0 text-truncate">${device.hostname || device.ip}</h6>
                    <span class="badge rounded-pill bg-light text-dark border"><span class="status-dot ${badgeClass}"></span>${badgeText}</span>
                </div>
                <div class="card-body">
                    <p class="text-muted mb-2"><i class="fas fa-network-wired me-2"></i>${device.ip}:${device.port}</p>
                    ${isSaved ? `
                    <p class="text-muted mb-2"><i class="fas fa-industry me-2"></i>場域: <strong>${device.farmName || '未分配'}</strong></p>
                    <p class="text-muted mb-2"><i class="fas fa-video me-2"></i>串流: ${device.streamUri ? '✅' : '❌'}</p>
                    <p class="text-muted mb-0"><i class="fas fa-camera me-2"></i>快照: ${device.snapshotUri ? '✅' : '❌'}</p>
                    ` : `<p class="text-muted">點擊下方按鈕將此攝影機新增至您的系統中進行管理。</p>`}
                </div>
                <div class="card-footer">${footer}</div>
            </div>
        `;
    };

    const showLoadingSkeleton = () => {
        cameraGrid.innerHTML = '';
        emptyState.classList.add('d-none');
        for (let i = 0; i < 3; i++) {
            const skeleton = loadingSkeleton.cloneNode(true);
            skeleton.classList.remove('d-none');
            cameraGrid.appendChild(skeleton.firstElementChild);
        }
    };
    
    const hideLoadingSkeleton = () => {
        const skeletons = cameraGrid.querySelectorAll('.shimmer-card');
        skeletons.forEach(s => s.parentElement.remove());
    };

    const setButtonLoading = (btn, isLoading) => {
        const spinner = btn.querySelector('.spinner-border');
        const icon = btn.querySelector('.fas');
        if (isLoading) {
            btn.disabled = true;
            spinner.classList.remove('d-none');
            icon.classList.add('d-none');
        } else {
            btn.disabled = false;
            spinner.classList.add('d-none');
            icon.classList.remove('d-none');
        }
    };

    const showToast = (type, message) => {
        const toastContainer = document.getElementById('toast-container');
        const toast = document.createElement('div');
        const icon = type === 'success' ? 'fa-check-circle' : type === 'error' ? 'fa-times-circle' : 'fa-info-circle';
        toast.className = `toast align-items-center text-white bg-${type === 'error' ? 'danger' : type} border-0 show`;
        toast.innerHTML = `
            <div class="d-flex">
                <div class="toast-body"><i class="fas ${icon} me-2"></i>${message}</div>
                <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast"></button>
        </div>
    `;
        toastContainer.appendChild(toast);
        setTimeout(() => toast.remove(), 5000);
    };
    
    const playHLS = (url) => {
        if (hls) hls.destroy();
        hls = new Hls();
        hls.loadSource(url);
        hls.attachMedia(streamVideo);
        hls.on(Hls.Events.ERROR, (event, data) => {
            console.error('HLS Error:', data);
            if (data.fatal) {
                showToast('error', 'HLS 播放器錯誤');
                streamModal.hide();
            }
        });
    };
    
    const showAddWithPasswordModal = (ip, port) => {
        document.getElementById('add-ip').value = ip;
        document.getElementById('add-port').value = port;
        document.getElementById('add-ip-display').value = `${ip}:${port}`;
        document.getElementById('add-username').value = 'admin';
        document.getElementById('add-password').value = '';
        addDeviceModal.show();
    };

    const showAssignFarmModal = async (ip) => {
        document.getElementById('assign-ip').value = ip;
        document.getElementById('assign-ip-display').textContent = ip;
        
        const farmSelect = document.getElementById('farm-select');
        farmSelect.innerHTML = '<option value="">載入場域中...</option>';
        farmSelect.disabled = true;
        
        assignFarmModal.show();

        try {
            const res = await api.get('/api/farms/list');
            if (res.success && res.farms.length > 0) {
                farmSelect.innerHTML = '<option value="">請選擇一個場域</option>';
                res.farms.forEach(farm => {
                    farmSelect.innerHTML += `<option value="${farm._id}" data-name="${farm.name}">${farm.name}</option>`;
                });
                farmSelect.disabled = false;
            } else {
                farmSelect.innerHTML = '<option value="">沒有可用的場域</option>';
            }
        } catch (e) {
            farmSelect.innerHTML = '<option value="">載入場域失敗</option>';
        }
    };


    // --- Event Listeners ---

    discoverBtn.addEventListener('click', handleDiscover);
    addAllBtn.addEventListener('click', handleAddAll);
    
    addDeviceForm.addEventListener('submit', (e) => {
        e.preventDefault();
        const ip = document.getElementById('add-ip').value;
        const port = document.getElementById('add-port').value;
        const username = document.getElementById('add-username').value;
        const password = document.getElementById('add-password').value;
        handleAddDevice(ip, parseInt(port), username, password);
        addDeviceModal.hide();
    });

    assignFarmForm.addEventListener('submit', async (e) => {
        e.preventDefault();
        const ip = document.getElementById('assign-ip').value;
        const farmSelect = document.getElementById('farm-select');
        const selectedOption = farmSelect.options[farmSelect.selectedIndex];
        const farmId = selectedOption.value;
        const farmName = selectedOption.getAttribute('data-name');

        if (!farmId) {
            showToast('error', '請選擇一個有效的場域');
            return;
        }
        
        const submitBtn = assignFarmForm.querySelector('button[type="submit"]');
        const originalBtnText = submitBtn.innerHTML;
        submitBtn.disabled = true;
        submitBtn.innerHTML = `<span class="spinner-border spinner-border-sm me-1" role="status" aria-hidden="true"></span>分配中...`;

        const success = await handleAssignFarm(ip, farmId, farmName);

        submitBtn.disabled = false;
        submitBtn.innerHTML = originalBtnText;

        if (success) {
            assignFarmModal.hide();
        }
    });

    streamModalEl.addEventListener('hidden.bs.modal', () => {
        // Modal 關閉時停止串流
        const ipMatch = document.getElementById('streamModalTitle').textContent.match(/(\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})/);
        if (ipMatch) {
            handleStopStream(ipMatch[1]);
        }
    });

    // --- Global App Object ---
    window.app = {
        addDevice: (ip, port) => handleAddDevice(ip, port, 'admin', ''), // 預設無密碼
        showAddModal: showAddWithPasswordModal,
        showAssignModal: showAssignFarmModal,
        removeDevice: handleRemoveDevice,
        playStream: handlePlayStream
    };

    // --- Initial Load ---
    loadDevices();
});
</script>
