<div class="row">
    <div class="col-12">
        <div class="d-flex justify-content-between align-items-center mb-4">
            <h2><i class="fas fa-video me-2"></i>ONVIF 攝影機管理</h2>
            <div>
                <button class="btn btn-primary me-2" onclick="discoverCameras()">
                    <i class="fas fa-search me-1"></i>搜尋攝影機
                </button>
                <button class="btn btn-info me-2" onclick="showTestConnectionModal()">
                    <i class="fas fa-network-wired me-1"></i>測試連接
                </button>
                <button class="btn btn-warning me-2" data-bs-toggle="modal" data-bs-target="#batchConnectModal">
                    <i class="fas fa-link me-1"></i>批量連接
                </button>
                <button class="btn btn-success" data-bs-toggle="modal" data-bs-target="#addCameraModal">
                    <i class="fas fa-plus me-1"></i>手動新增
                </button>
            </div>
        </div>
    </div>
</div>

<!-- 系統狀態 -->
<div class="row mb-4">
    <div class="col-md-3">
        <div class="card bg-primary text-white">
            <div class="card-body">
                <div class="d-flex justify-content-between">
                    <div>
                        <h6 class="card-title">已連接攝影機</h6>
                        <h3 id="connectedCount">{{cameras.length}}</h3>
                    </div>
                    <div class="align-self-center">
                        <i class="fas fa-video fa-2x"></i>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="col-md-3">
        <div class="card bg-success text-white">
            <div class="card-body">
                <div class="d-flex justify-content-between">
                    <div>
                        <h6 class="card-title">串流中</h6>
                        <h3 id="streamingCount">{{streamingCount}}</h3>
                    </div>
                    <div class="align-self-center">
                        <i class="fas fa-broadcast-tower fa-2x"></i>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="col-md-3">
        <div class="card bg-info text-white">
            <div class="card-body">
                <div class="d-flex justify-content-between">
                    <div>
                        <h6 class="card-title">快照數量</h6>
                        <h3 id="snapshotCount">{{snapshotCount}}</h3>
                    </div>
                    <div class="align-self-center">
                        <i class="fas fa-camera fa-2x"></i>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="col-md-3">
        <div class="card bg-warning text-white">
            <div class="card-body">
                <div class="d-flex justify-content-between">
                    <div>
                        <h6 class="card-title">發現的攝影機</h6>
                        <h3 id="discoveredCount">0</h3>
                    </div>
                    <div class="align-self-center">
                        <i class="fas fa-search fa-2x"></i>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- 攝影機列表 -->
<div class="row">
    <div class="col-12">
        <div class="card">
            <div class="card-header">
                <h5 class="mb-0">攝影機列表</h5>
            </div>
            <div class="card-body">
                <div id="cameraList">
                    {{#if cameras.length}}
                        <div class="row" id="camerasGrid">
                            {{#each cameras}}
                            <div class="col-md-6 col-lg-4 mb-4" data-camera-ip="{{ip}}">
                                <div class="card h-100">
                                    <div class="card-header d-flex justify-content-between align-items-center">
                                        <h6 class="mb-0">{{ip}}:{{port}}</h6>
                                        <span class="badge {{#if connected}}bg-success{{else if discovered}}bg-warning{{else}}bg-secondary{{/if}}">
                                            {{#if connected}}已連接{{else if discovered}}已發現{{else}}離線{{/if}}
                                        </span>
                                    </div>
                                    <div class="card-body">
                                        {{#if lastSnapshot}}
                                        <div class="text-center mb-3">
                                            <img src="{{lastSnapshot.path}}" class="img-fluid rounded snapshot-preview" 
                                                 alt="攝影機快照" style="max-height: 150px; cursor: pointer;"
                                                 onclick="showFullSnapshot('{{lastSnapshot.path}}')">
                                            <small class="text-muted d-block mt-1">
                                                {{formatDate lastSnapshot.timestamp}}
                                            </small>
                                        </div>
                                        {{else}}
                                        <div class="text-center mb-3">
                                            <div class="bg-light rounded d-flex align-items-center justify-content-center" 
                                                 style="height: 150px;">
                                                <i class="fas fa-video fa-3x text-muted"></i>
                                            </div>
                                        </div>
                                        {{/if}}
                                        
                                        {{#if info.Manufacturer}}
                                        <p class="mb-1"><strong>製造商:</strong> {{info.Manufacturer}}</p>
                                        {{/if}}
                                        {{#if info.Model}}
                                        <p class="mb-1"><strong>型號:</strong> {{info.Model}}</p>
                                        {{/if}}
                                        <p class="mb-1"><strong>配置檔:</strong> {{profiles}} 個</p>
                                        <p class="mb-1"><strong>串流:</strong> 
                                            {{#if hasStream}}
                                                <span class="text-success">可用</span>
                                            {{else}}
                                                <span class="text-muted">未設定</span>
                                            {{/if}}
                                        </p>
                                        <p class="mb-3"><strong>快照:</strong> 
                                            {{#if hasSnapshot}}
                                                <span class="text-success">可用</span>
                                            {{else}}
                                                <span class="text-muted">未設定</span>
                                            {{/if}}
                                        </p>
                                    </div>
                                    <div class="card-footer">
                                        <div class="btn-group w-100" role="group">
                                            <button class="btn btn-sm btn-outline-primary" 
                                                    onclick="captureSnapshot('{{ip}}')"
                                                    {{#unless hasSnapshot}}disabled{{/unless}}>
                                                <i class="fas fa-camera"></i>
                                            </button>
                                            <button class="btn btn-sm btn-outline-success" 
                                                    onclick="{{#if isStreaming}}stopStream{{else}}startStream{{/if}}('{{ip}}')"
                                                    {{#unless hasStream}}disabled{{/unless}}>
                                                <i class="fas fa-{{#if isStreaming}}stop{{else}}play{{/if}}"></i>
                                            </button>
                                            <button class="btn btn-sm btn-outline-info" 
                                                    onclick="viewStream('{{ip}}')"
                                                    {{#unless isStreaming}}disabled{{/unless}}>
                                                <i class="fas fa-eye"></i>
                                            </button>
                                            <button class="btn btn-sm btn-outline-danger" 
                                                    onclick="disconnectCamera('{{ip}}')">
                                                <i class="fas fa-unlink"></i>
                                            </button>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            {{/each}}
                        </div>
                    {{else}}
                        <div class="text-center py-5">
                            <i class="fas fa-video fa-4x text-muted mb-3"></i>
                            <h5 class="text-muted">尚未連接任何攝影機</h5>
                            <p class="text-muted">點擊「搜尋攝影機」或「手動新增」來開始</p>
                        </div>
                    {{/if}}
                </div>
            </div>
        </div>
    </div>
</div>

<!-- 新增攝影機模態框 -->
<div class="modal fade" id="addCameraModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">新增ONVIF攝影機</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <form id="addCameraForm">
                <div class="modal-body">
                    <div class="mb-3">
                        <label for="cameraIp" class="form-label">IP位址 *</label>
                        <input type="text" class="form-control" id="cameraIp" required 
                               placeholder="例如: 192.168.1.100">
                    </div>
                    <div class="mb-3">
                        <label for="cameraPort" class="form-label">連接埠</label>
                        <input type="number" class="form-control" id="cameraPort" value="80" 
                               min="1" max="65535">
                    </div>
                    <div class="mb-3">
                        <label for="cameraUsername" class="form-label">使用者名稱</label>
                        <input type="text" class="form-control" id="cameraUsername" 
                               placeholder="攝影機登入帳號">
                    </div>
                    <div class="mb-3">
                        <label for="cameraPassword" class="form-label">密碼</label>
                        <input type="password" class="form-control" id="cameraPassword" 
                               placeholder="攝影機登入密碼">
                    </div>
                    <div class="form-text">
                        <i class="fas fa-info-circle me-1"></i>
                        請確保攝影機支援ONVIF協議並已啟用
                    </div>
                    <div class="mt-3">
                        <button type="button" class="btn btn-outline-info btn-sm" onclick="testCameraConnection()">
                            <i class="fas fa-network-wired me-1"></i>測試網路連接
                        </button>
                        <small class="text-muted d-block mt-1">點擊測試攝影機是否可達</small>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">取消</button>
                    <button type="submit" class="btn btn-primary">
                        <i class="fas fa-plus me-1"></i>新增攝影機
                    </button>
                </div>
            </form>
        </div>
    </div>
</div>

<!-- 串流檢視模態框 -->
<div class="modal fade" id="streamModal" tabindex="-1">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">攝影機串流</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body text-center">
                <video id="streamVideo" class="w-100" controls style="max-height: 400px;">
                    您的瀏覽器不支援影片播放
                </video>
                <div id="streamInfo" class="mt-2 text-muted"></div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">關閉</button>
                <button type="button" class="btn btn-primary" onclick="addToCarousel()">
                    <i class="fas fa-plus-circle me-1"></i>加入輪播
                </button>
            </div>
        </div>
    </div>
</div>

<!-- 快照檢視模態框 -->
<div class="modal fade" id="snapshotModal" tabindex="-1">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">攝影機快照</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body text-center">
                <img id="fullSnapshot" class="img-fluid" alt="攝影機快照">
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">關閉</button>
                <a id="downloadSnapshot" class="btn btn-primary" download>
                    <i class="fas fa-download me-1"></i>下載
                </a>
            </div>
        </div>
    </div>
</div>

<!-- 批量連接模態框 -->
<div class="modal fade" id="batchConnectModal" tabindex="-1">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">批量連接攝影機</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <form id="batchConnectForm">
                <div class="modal-body">
                    <div class="alert alert-info">
                        <i class="fas fa-info-circle me-2"></i>
                        將使用相同的認證資訊連接所有已發現的攝影機
                    </div>
                    
                    <div class="mb-3">
                        <label for="batchUsername" class="form-label">使用者名稱</label>
                        <input type="text" class="form-control" id="batchUsername" 
                               placeholder="攝影機登入帳號" value="admin">
                    </div>
                    <div class="mb-3">
                        <label for="batchPassword" class="form-label">密碼</label>
                        <input type="password" class="form-control" id="batchPassword" 
                               placeholder="攝影機登入密碼">
                    </div>
                    
                    <div class="mb-3">
                        <h6>將要連接的攝影機：</h6>
                        <div id="batchCameraList" class="border rounded p-3" style="max-height: 200px; overflow-y: auto;">
                            <!-- 動態填充攝影機列表 -->
                        </div>
                    </div>
                    
                    <div id="batchProgress" class="d-none">
                        <h6>連接進度：</h6>
                        <div class="progress mb-2">
                            <div id="batchProgressBar" class="progress-bar" role="progressbar" style="width: 0%"></div>
                        </div>
                        <div id="batchStatus">準備開始...</div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">取消</button>
                    <button type="submit" class="btn btn-warning">
                        <i class="fas fa-link me-1"></i>開始批量連接
                    </button>
                </div>
            </form>
        </div>
    </div>
</div>

<!-- 載入指示器 -->
<div id="loadingOverlay" class="position-fixed top-0 start-0 w-100 h-100 d-none" 
     style="background: rgba(0,0,0,0.5); z-index: 9999;">
    <div class="d-flex justify-content-center align-items-center h-100">
        <div class="text-center text-white">
            <div class="spinner-border mb-3" role="status"></div>
            <div id="loadingText">處理中...</div>
        </div>
    </div>
</div>

<script src="https://cdn.jsdelivr.net/npm/hls.js@latest"></script>
<script>
let currentStreamIp = null;

// 搜尋攝影機
async function discoverCameras() {
    showOnvifLoading('搜尋攝影機中...');
    
    try {
        const response = await fetch('/api/onvif/discover', {
            method: 'POST'
        });
        
        const result = await response.json();
        
        if (result.success) {
            const discoveredCountElement = document.getElementById('discoveredCount');
            if (discoveredCountElement) {
                discoveredCountElement.textContent = result.cameras.length;
            }
            showToast('success', `發現 ${result.cameras.length} 台攝影機`);
            
            // 動態更新攝影機列表，而不是重新整理頁面
            updateCameraList();
        } else {
            showToast('error', result.error || '搜尋失敗');
        }
    } catch (error) {
        console.error('搜尋攝影機錯誤:', error);
        showToast('error', '搜尋攝影機失敗');
    } finally {
        hideOnvifLoading();
    }
}

// 新增攝影機
document.addEventListener('DOMContentLoaded', function() {
    console.log('🚀 DOM載入完成，開始綁定表單事件');
    
    const addCameraForm = document.getElementById('addCameraForm');
    console.log('📋 找到表單元素:', addCameraForm);
    
    if (addCameraForm) {
        console.log('✅ 綁定表單提交事件');
        addCameraForm.addEventListener('submit', async (e) => {
            console.log('📤 表單提交觸發');
            e.preventDefault();
            
            const formData = {
                ip: document.getElementById('cameraIp').value,
                port: parseInt(document.getElementById('cameraPort').value) || 80,
                username: document.getElementById('cameraUsername').value,
                password: document.getElementById('cameraPassword').value
            };
            
            console.log('📝 表單資料:', formData);
            
            // 驗證輸入
            if (!formData.ip) {
                showToast('error', '請輸入攝影機IP位址');
                return;
            }
            
            showOnvifLoading('連接攝影機中...');
            
            try {
                console.log('🌐 發送連接請求到:', '/api/onvif/connect');
                const response = await fetch('/api/onvif/connect', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(formData)
                });
                
                console.log('📡 收到回應:', response.status, response.statusText);
                
                if (!response.ok) {
                    throw new Error(`HTTP ${response.status}: ${response.statusText}`);
                }
                
                const result = await response.json();
                console.log('📋 回應內容:', result);
                
                if (result.success) {
                    showToast('success', '攝影機連接成功');
                    
                    // 關閉模態框
                    const addCameraModal = document.getElementById('addCameraModal');
                    if (addCameraModal) {
                        if (typeof bootstrap !== 'undefined') {
                            const modalInstance = bootstrap.Modal.getInstance(addCameraModal);
                            if (modalInstance) {
                                modalInstance.hide();
                            }
                        } else {
                            // 備用方法關閉模態框
                            addCameraModal.classList.remove('show');
                            addCameraModal.style.display = 'none';
                            addCameraModal.setAttribute('aria-hidden', 'true');
                        }
                    }
                    
                    // 重置表單
                    addCameraForm.reset();
                    
                    // 更新攝影機列表
                    setTimeout(() => {
                        updateCameraList();
                    }, 1000);
                } else {
                    const errorMessage = result.error || '連接失敗';
                    console.error('❌ 連接失敗:', errorMessage);
                    
                    // 根據錯誤類型提供具體建議
                    let userMessage = errorMessage;
                    if (errorMessage.includes('Network timeout')) {
                        userMessage = '網路超時 - 請檢查攝影機是否在線，或網路連接是否正常';
                    } else if (errorMessage.includes('ECONNREFUSED')) {
                        userMessage = '連接被拒絕 - 請檢查攝影機IP和端口是否正確';
                    } else if (errorMessage.includes('authentication')) {
                        userMessage = '認證失敗 - 請檢查用戶名和密碼';
                    }
                    
                    showToast('error', userMessage);
                    
                    // 顯示詳細錯誤信息
                    const errorDetails = document.createElement('div');
                    errorDetails.className = 'alert alert-warning mt-3';
                    errorDetails.innerHTML = `
                        <h6>連接失敗詳情:</h6>
                        <p><strong>錯誤:</strong> ${errorMessage}</p>
                        <p><strong>攝影機:</strong> ${formData.ip}:${formData.port}</p>
                        <p><strong>建議:</strong></p>
                        <ul>
                            <li>確認攝影機電源和網路連接</li>
                            <li>檢查攝影機IP位址是否正確</li>
                            <li>確認攝影機支援ONVIF協議</li>
                            <li>檢查網路防火牆設定</li>
                        </ul>
                    `;
                    
                    // 在模態框中顯示錯誤詳情
                    const modalBody = document.querySelector('#addCameraModal .modal-body');
                    if (modalBody) {
                        // 移除之前的錯誤詳情
                        const existingError = modalBody.querySelector('.alert-warning');
                        if (existingError) {
                            existingError.remove();
                        }
                        modalBody.appendChild(errorDetails);
                    }
                }
            } catch (error) {
                console.error('❌ 連接攝影機錯誤:', error);
                showToast('error', `連接攝影機失敗: ${error.message}`);
                
                // 顯示網路錯誤詳情
                const errorDetails = document.createElement('div');
                errorDetails.className = 'alert alert-danger mt-3';
                errorDetails.innerHTML = `
                    <h6>網路連接錯誤:</h6>
                    <p><strong>錯誤:</strong> ${error.message}</p>
                    <p><strong>攝影機:</strong> ${formData.ip}:${formData.port}</p>
                    <p><strong>建議:</strong></p>
                    <ul>
                        <li>檢查網路連接是否正常</li>
                        <li>確認攝影機IP位址是否正確</li>
                        <li>檢查防火牆設定</li>
                        <li>嘗試使用 test-cameras.bat 測試連接</li>
                    </ul>
                `;
                
                const modalBody = document.querySelector('#addCameraModal .modal-body');
                if (modalBody) {
                    const existingError = modalBody.querySelector('.alert-danger');
                    if (existingError) {
                        existingError.remove();
                    }
                    modalBody.appendChild(errorDetails);
                }
            } finally {
                hideOnvifLoading();
            }
        });
    } else {
        console.error('❌ 找不到表單元素');
    }
});

// 拍攝快照
async function captureSnapshot(ip) {
    showOnvifLoading('拍攝快照中...');
    
    try {
        const response = await fetch(`/api/onvif/snapshot/${ip}`, {
            method: 'POST'
        });
        
        const result = await response.json();
        
        if (result.success) {
            showToast('success', '快照拍攝成功');
            
            // 更新快照預覽
            const cameraCard = document.querySelector(`[data-camera-ip="${ip}"]`);
            if (cameraCard) {
                const snapshotPreview = cameraCard.querySelector('.snapshot-preview');
                if (snapshotPreview) {
                    snapshotPreview.src = result.snapshot.path + '?t=' + Date.now();
                }
            }
            
            // 更新快照數量
            updateSnapshotCount();
        } else {
            showToast('error', result.error || '拍攝失敗');
        }
    } catch (error) {
        console.error('拍攝快照錯誤:', error);
        showToast('error', '拍攝快照失敗');
    } finally {
        hideOnvifLoading();
    }
}

// 開始串流
async function startStream(ip) {
    showOnvifLoading('啟動串流中...');
    
    try {
        const response = await fetch(`/api/onvif/stream/start/${ip}`, {
            method: 'POST'
        });
        
        const result = await response.json();
        
        if (result.success) {
            showToast('success', '串流啟動成功');
            
            // 更新按鈕狀態
            const cameraCard = document.querySelector(`[data-camera-ip="${ip}"]`);
            if (cameraCard) {
                const streamBtn = cameraCard.querySelector('button[onclick*="startStream"]');
                if (streamBtn) {
                    streamBtn.innerHTML = '<i class="fas fa-stop"></i>';
                    streamBtn.setAttribute('onclick', `stopStream('${ip}')`);
                }
                
                // 啟用檢視按鈕
                const viewBtn = cameraCard.querySelector('button[onclick*="viewStream"]');
                if (viewBtn) {
                    viewBtn.disabled = false;
                }
            }
            
            updateStreamingCount();
        } else {
            showToast('error', result.error || '啟動失敗');
        }
    } catch (error) {
        console.error('啟動串流錯誤:', error);
        showToast('error', '啟動串流失敗');
    } finally {
        hideOnvifLoading();
    }
}

// 停止串流
async function stopStream(ip) {
    try {
        const response = await fetch(`/api/onvif/stream/stop/${ip}`, {
            method: 'POST'
        });
        
        const result = await response.json();
        
        if (result.success) {
            showToast('success', '串流已停止');
            
            // 更新按鈕狀態
            const cameraCard = document.querySelector(`[data-camera-ip="${ip}"]`);
            if (cameraCard) {
                const streamBtn = cameraCard.querySelector('button[onclick*="stopStream"]');
                if (streamBtn) {
                    streamBtn.innerHTML = '<i class="fas fa-play"></i>';
                    streamBtn.setAttribute('onclick', `startStream('${ip}')`);
                }
                
                // 禁用檢視按鈕
                const viewBtn = cameraCard.querySelector('button[onclick*="viewStream"]');
                if (viewBtn) {
                    viewBtn.disabled = true;
                }
            }
            
            updateStreamingCount();
        } else {
            showToast('error', result.error || '停止失敗');
        }
    } catch (error) {
        console.error('停止串流錯誤:', error);
        showToast('error', '停止串流失敗');
    }
}

// 檢視串流
function viewStream(ip) {
    currentStreamIp = ip;
    const streamUrl = `/streams/${ip}/playlist.m3u8`;
    const video = document.getElementById('streamVideo');
    const streamInfo = document.getElementById('streamInfo');
    const streamModal = document.getElementById('streamModal');
    
    if (video) {
        if (Hls.isSupported()) {
            const hls = new Hls();
            hls.loadSource(streamUrl);
            hls.attachMedia(video);
            hls.on(Hls.Events.MANIFEST_PARSED, function() {
                video.play().catch(e => console.warn('自動播放失敗:', e));
            });
        } else if (video.canPlayType('application/vnd.apple.mpegurl')) {
            video.src = streamUrl;
            video.addEventListener('loadedmetadata', function() {
                video.play().catch(e => console.warn('自動播放失敗:', e));
            });
        }
    }
    
    if (streamInfo) {
        streamInfo.textContent = `串流來源: ${ip}`;
    }
    
    if (streamModal) {
        new bootstrap.Modal(streamModal).show();
    }
}

// 連接已發現的攝影機
async function connectDiscoveredCamera(ip) {
    console.log('🔌 嘗試連接攝影機:', ip);
    
    // 顯示連接表單
    const addCameraModal = document.getElementById('addCameraModal');
    console.log('📋 模態框元素:', addCameraModal);
    
    if (addCameraModal) {
        // 預填IP位址
        const ipInput = document.getElementById('cameraIp');
        console.log('📝 IP輸入框:', ipInput);
        
        if (ipInput) {
            ipInput.value = ip;
            console.log('✅ IP已預填:', ip);
        }
        
        // 檢查Bootstrap是否可用
        if (typeof bootstrap !== 'undefined') {
            console.log('✅ Bootstrap可用，創建模態框實例');
            const modal = new bootstrap.Modal(addCameraModal);
            modal.show();
            console.log('✅ 模態框已顯示');
        } else {
            console.error('❌ Bootstrap不可用');
            // 嘗試直接顯示
            addCameraModal.classList.add('show');
            addCameraModal.style.display = 'block';
            addCameraModal.setAttribute('aria-hidden', 'false');
            console.log('⚠️ 使用備用方法顯示模態框');
        }
    } else {
        console.error('❌ 找不到模態框元素');
    }
}

// 斷開攝影機
async function disconnectCamera(ip) {
    if (!confirm('確定要斷開此攝影機嗎？')) return;
    
    try {
        const response = await fetch(`/api/onvif/disconnect/${ip}`, {
            method: 'POST'
        });
        
        const result = await response.json();
        
        if (result.success) {
            showToast('success', '攝影機已斷開');
            
            // 更新攝影機列表
            updateCameraList();
        } else {
            showToast('error', result.error || '斷開失敗');
        }
    } catch (error) {
        console.error('斷開攝影機錯誤:', error);
        showToast('error', '斷開攝影機失敗');
    }
}

// 顯示完整快照
function showFullSnapshot(imagePath) {
    const fullSnapshot = document.getElementById('fullSnapshot');
    const downloadSnapshot = document.getElementById('downloadSnapshot');
    const snapshotModal = document.getElementById('snapshotModal');
    
    if (fullSnapshot) {
        fullSnapshot.src = imagePath;
    }
    
    if (downloadSnapshot) {
        downloadSnapshot.href = imagePath;
    }
    
    if (snapshotModal) {
        new bootstrap.Modal(snapshotModal).show();
    }
}

// 加入輪播
async function addToCarousel() {
    if (!currentStreamIp) return;
    
    try {
        const response = await fetch('/api/carousel/add-camera', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                ip: currentStreamIp,
                streamUrl: `/streams/${currentStreamIp}/playlist.m3u8`
            })
        });
        
        const result = await response.json();
        
        if (result.success) {
            showToast('success', '已加入輪播列表');
            const streamModal = document.getElementById('streamModal');
            if (streamModal) {
                const modalInstance = bootstrap.Modal.getInstance(streamModal);
                if (modalInstance) {
                    modalInstance.hide();
                }
            }
        } else {
            showToast('error', result.error || '加入失敗');
        }
    } catch (error) {
        console.error('加入輪播錯誤:', error);
        showToast('error', '加入輪播失敗');
    }
}

// 測試攝影機網路連接
async function testCameraConnection() {
    const ip = document.getElementById('cameraIp').value;
    const port = document.getElementById('cameraPort').value || 80;
    
    if (!ip) {
        showToast('error', '請先輸入攝影機IP位址');
        return;
    }
    
    console.log('🔍 測試攝影機網路連接:', ip, port);
    
    try {
        const response = await fetch('/api/onvif/test-connection', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({ ip, port })
        });
        
        const result = await response.json();
        console.log('📡 網路測試結果:', result);
        
        if (result.success && result.reachable) {
            showToast('success', `攝影機 ${ip} 網路連接正常`);
        } else {
            showToast('error', `攝影機 ${ip} 網路連接失敗: ${result.error || '未知錯誤'}`);
        }
    } catch (error) {
        console.error('❌ 網路測試失敗:', error);
        showToast('error', '網路測試失敗');
    }
}

// 工具函數
function showOnvifLoading(text) {
    const loadingText = document.getElementById('loadingText');
    const loadingOverlay = document.getElementById('loadingOverlay');
    
    if (loadingText) {
        loadingText.textContent = text;
    }
    
    if (loadingOverlay) {
        loadingOverlay.classList.remove('d-none');
    } else {
        console.warn('載入指示器元素未找到');
    }
}

function hideOnvifLoading() {
    const loadingOverlay = document.getElementById('loadingOverlay');
    
    if (loadingOverlay) {
        loadingOverlay.classList.add('d-none');
    } else {
        console.warn('載入指示器元素未找到');
    }
}

function showToast(type, message) {
    // 這裡可以整合現有的通知系統
    const alertClass = type === 'success' ? 'alert-success' : 'alert-danger';
    const alertHtml = `
        <div class="alert ${alertClass} alert-dismissible fade show position-fixed" 
             style="top: 20px; right: 20px; z-index: 10000;">
            ${message}
            <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
        </div>
    `;
    document.body.insertAdjacentHTML('beforeend', alertHtml);
    
    // 自動移除
    setTimeout(() => {
        const alert = document.querySelector('.alert');
        if (alert) alert.remove();
    }, 5000);
}

function updateCounts() {
    updateConnectedCount();
    updateStreamingCount();
    updateSnapshotCount();
}

// 動態更新攝影機列表
async function updateCameraList() {
    try {
        console.log('🔄 開始更新攝影機列表...');
        
        // 直接使用發現的攝影機資料，而不是調用status API
        const response = await fetch('/api/onvif/discover', {
            method: 'POST'
        });
        
        const result = await response.json();
        console.log('📡 攝影機發現結果:', result);
        
        if (result.success && result.cameras) {
            const cameraList = document.getElementById('cameraList');
            if (cameraList) {
                // 清空現有列表
                cameraList.innerHTML = '';
                
                if (result.cameras.length === 0) {
                    cameraList.innerHTML = '<div class="text-center text-muted py-4">尚未發現任何攝影機</div>';
                    return;
                }
                
                console.log(`📹 準備顯示 ${result.cameras.length} 台攝影機`);
                
                // 創建攝影機網格
                const camerasGrid = document.createElement('div');
                camerasGrid.className = 'row';
                camerasGrid.id = 'camerasGrid';
                
                result.cameras.forEach((camera, index) => {
                    console.log(`📷 創建攝影機卡片 ${index + 1}:`, camera);
                    
                    // 確保攝影機物件有正確的屬性
                    const normalizedCamera = {
                        ip: camera.ip || camera.address || 'Unknown',
                        port: camera.port || 80,
                        hostname: camera.hostname || camera.ip || camera.address,
                        connected: camera.connected || false,
                        discovered: camera.discovered || true,
                        profiles: camera.profiles || 0,
                        hasStream: camera.hasStream || false,
                        hasSnapshot: camera.hasSnapshot || false,
                        isStreaming: camera.isStreaming || false,
                        lastSnapshot: camera.lastSnapshot || null,
                        urn: camera.urn,
                        xaddrs: camera.xaddrs,
                        types: camera.types,
                        scopes: camera.scopes
                    };
                    
                    console.log(`📷 標準化後的攝影機資料:`, normalizedCamera);
                    const cameraCard = createCameraCard(normalizedCamera);
                    camerasGrid.appendChild(cameraCard);
                });
                
                cameraList.appendChild(camerasGrid);
                
                // 更新計數
                updateCounts();
                
                console.log('✅ 攝影機列表更新完成');
            }
        } else {
            console.error('❌ 攝影機發現失敗:', result.error);
        }
    } catch (error) {
        console.error('❌ 更新攝影機列表失敗:', error);
    }
}

// 創建攝影機卡片
function createCameraCard(camera) {
    const col = document.createElement('div');
    col.className = 'col-md-6 col-lg-4 mb-4';
    col.setAttribute('data-camera-ip', camera.ip);
    
    const statusBadge = camera.connected ? 'bg-success' : 
                       camera.discovered ? 'bg-warning' : 'bg-secondary';
    const statusText = camera.connected ? '已連接' : 
                      camera.discovered ? '已發現' : '離線';
    
    col.innerHTML = `
        <div class="card h-100">
            <div class="card-header d-flex justify-content-between align-items-center">
                <h6 class="mb-0">${camera.ip}:${camera.port}</h6>
                <span class="badge ${statusBadge}">${statusText}</span>
            </div>
            <div class="card-body">
                <div class="row">
                    <div class="col-6">
                        <small class="text-muted">配置檔</small>
                        <div>${camera.profiles || 0}</div>
                    </div>
                    <div class="col-6">
                        <small class="text-muted">串流</small>
                        <div>${camera.hasStream ? '可用' : '不可用'}</div>
                    </div>
                </div>
                <div class="row mt-2">
                    <div class="col-6">
                        <small class="text-muted">快照</small>
                        <div>${camera.hasSnapshot ? '可用' : '不可用'}</div>
                    </div>
                    <div class="col-6">
                        <small class="text-muted">狀態</small>
                        <div>${camera.isStreaming ? '串流中' : '靜止'}</div>
                    </div>
                </div>
                ${camera.lastSnapshot ? `
                <div class="mt-3">
                    <img src="${camera.lastSnapshot.path}" class="img-fluid snapshot-preview" alt="快照預覽">
                </div>
                ` : ''}
            </div>
            <div class="card-footer">
                <div class="btn-group w-100" role="group">
                    ${!camera.connected ? `
                    <button class="btn btn-sm btn-primary" onclick="connectDiscoveredCamera('${camera.ip}')">
                        <i class="fas fa-plug me-1"></i>連接
                    </button>
                    ` : `
                    <button class="btn btn-sm btn-success" onclick="captureSnapshot('${camera.ip}')">
                        <i class="fas fa-camera me-1"></i>快照
                    </button>
                    <button class="btn btn-sm btn-info" onclick="viewStream('${camera.ip}')">
                        <i class="fas fa-play me-1"></i>檢視
                    </button>
                    `}
                    <button class="btn btn-sm btn-danger" onclick="disconnectCamera('${camera.ip}')">
                        <i class="fas fa-times me-1"></i>斷開
                    </button>
                </div>
            </div>
        </div>
    `;
    
    return col;
}

function updateConnectedCount() {
    const element = document.getElementById('connectedCount');
    if (element) {
        const count = document.querySelectorAll('[data-camera-ip]').length;
        element.textContent = count;
    }
}

function updateStreamingCount() {
    const element = document.getElementById('streamingCount');
    if (element) {
        const count = document.querySelectorAll('button[onclick*="stopStream"]').length;
        element.textContent = count;
    }
}

function updateSnapshotCount() {
    const element = document.getElementById('snapshotCount');
    if (element) {
        const count = document.querySelectorAll('.snapshot-preview').length;
        element.textContent = count;
    }
}

// 批量連接功能
let discoveredCameras = [];

// 顯示批量連接模態框時，載入攝影機列表
document.addEventListener('DOMContentLoaded', function() {
    const batchConnectModal = document.getElementById('batchConnectModal');
    if (batchConnectModal) {
        batchConnectModal.addEventListener('show.bs.modal', async function() {
            await loadBatchCameraList();
        });
    }
    
    // 綁定批量連接表單
    const batchConnectForm = document.getElementById('batchConnectForm');
    if (batchConnectForm) {
        batchConnectForm.addEventListener('submit', async (e) => {
            e.preventDefault();
            await startBatchConnect();
        });
    }
});

// 載入批量連接的攝影機列表
async function loadBatchCameraList() {
    try {
        console.log('🔍 載入批量連接攝影機列表...');
        
        const response = await fetch('/api/onvif/discover', {
            method: 'POST'
        });
        
        const result = await response.json();
        
        if (result.success && result.cameras) {
            discoveredCameras = result.cameras.filter(cam => !cam.connected);
            
            const batchCameraList = document.getElementById('batchCameraList');
            if (batchCameraList) {
                if (discoveredCameras.length === 0) {
                    batchCameraList.innerHTML = '<div class="text-muted text-center py-3">沒有發現未連接的攝影機</div>';
                } else {
                    batchCameraList.innerHTML = discoveredCameras.map((cam, index) => `
                        <div class="form-check">
                            <input class="form-check-input" type="checkbox" value="${cam.ip}" id="cam_${index}" checked>
                            <label class="form-check-label" for="cam_${index}">
                                ${cam.ip}:${cam.port || 80}
                                ${cam.hostname ? `(${cam.hostname})` : ''}
                            </label>
                        </div>
                    `).join('');
                }
            }
        }
    } catch (error) {
        console.error('載入攝影機列表失敗:', error);
        showToast('error', '載入攝影機列表失敗');
    }
}

// 開始批量連接
async function startBatchConnect() {
    const username = document.getElementById('batchUsername').value;
    const password = document.getElementById('batchPassword').value;
    
    if (!username || !password) {
        showToast('error', '請輸入用戶名和密碼');
        return;
    }
    
    // 獲取選中的攝影機
    const selectedCameras = [];
    const checkboxes = document.querySelectorAll('#batchCameraList input[type="checkbox"]:checked');
    checkboxes.forEach(checkbox => {
        const camera = discoveredCameras.find(cam => cam.ip === checkbox.value);
        if (camera) {
            selectedCameras.push(camera);
        }
    });
    
    if (selectedCameras.length === 0) {
        showToast('error', '請選擇要連接的攝影機');
        return;
    }
    
    console.log(`🚀 開始批量連接 ${selectedCameras.length} 台攝影機`);
    
    // 顯示進度條
    const batchProgress = document.getElementById('batchProgress');
    const batchProgressBar = document.getElementById('batchProgressBar');
    const batchStatus = document.getElementById('batchStatus');
    
    batchProgress.classList.remove('d-none');
    
    let successCount = 0;
    let failureCount = 0;
    
    for (let i = 0; i < selectedCameras.length; i++) {
        const camera = selectedCameras[i];
        const progress = Math.round(((i + 1) / selectedCameras.length) * 100);
        
        batchProgressBar.style.width = `${progress}%`;
        batchStatus.textContent = `正在連接 ${camera.ip} (${i + 1}/${selectedCameras.length})...`;
        
        try {
            console.log(`🔗 連接攝影機 ${i + 1}/${selectedCameras.length}: ${camera.ip}`);
            
            const response = await fetch('/api/onvif/connect', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    ip: camera.ip,
                    port: camera.port || 80,
                    username: username,
                    password: password
                })
            });
            
            const result = await response.json();
            
            if (result.success) {
                successCount++;
                console.log(`✅ 攝影機 ${camera.ip} 連接成功`);
            } else {
                failureCount++;
                console.log(`❌ 攝影機 ${camera.ip} 連接失敗:`, result.error);
            }
        } catch (error) {
            failureCount++;
            console.error(`❌ 攝影機 ${camera.ip} 連接異常:`, error);
        }
        
        // 每連接一台攝影機後稍微等待
        await new Promise(resolve => setTimeout(resolve, 1000));
    }
    
    // 完成
    batchStatus.textContent = `批量連接完成！成功: ${successCount}, 失敗: ${failureCount}`;
    
    if (successCount > 0) {
        showToast('success', `批量連接完成！成功連接 ${successCount} 台攝影機`);
        
        // 更新攝影機列表
        setTimeout(() => {
            updateCameraList();
        }, 2000);
    }
    
    if (failureCount > 0) {
        showToast('warning', `有 ${failureCount} 台攝影機連接失敗，請檢查認證資訊`);
    }
}

// 定期更新狀態
setInterval(async () => {
    try {
        // 使用discover API來獲取最新的攝影機狀態
        const response = await fetch('/api/onvif/discover', {
            method: 'POST'
        });
        
        const result = await response.json();
        
        if (result.success && result.cameras) {
            const connectedCountElement = document.getElementById('connectedCount');
            const streamingCountElement = document.getElementById('streamingCount');
            const snapshotCountElement = document.getElementById('snapshotCount');
            
            // 計算已連接的攝影機數量
            const connectedCount = result.cameras.filter(cam => cam.connected).length;
            const streamingCount = result.cameras.filter(cam => cam.isStreaming).length;
            const snapshotCount = result.cameras.filter(cam => cam.lastSnapshot).length;
            
            if (connectedCountElement) {
                connectedCountElement.textContent = connectedCount;
            }
            if (streamingCountElement) {
                streamingCountElement.textContent = streamingCount;
            }
            if (snapshotCountElement) {
                snapshotCountElement.textContent = snapshotCount;
            }
        }
    } catch (error) {
        console.warn('更新狀態失敗:', error);
    }
}, 30000); // 每30秒更新一次
</script>
